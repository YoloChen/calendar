*--------------------------------------------------------------------------------------------------------------------------------------------------------
* (ES) AUTOGENERADO - ¡¡ATENCIÓN!! - ¡¡NO PENSADO PARA EJECUTAR!! USAR SOLAMENTE PARA INTEGRAR CAMBIOS Y ALMACENAR CON HERRAMIENTAS SCM!!
* (EN) AUTOGENERATED - ATTENTION!! - NOT INTENDED FOR EXECUTION!! USE ONLY FOR MERGING CHANGES AND STORING WITH SCM TOOLS!!
*--------------------------------------------------------------------------------------------------------------------------------------------------------
*< FOXBIN2PRG: Version="1.19" SourceFile="datepicker.vcx" /> (Solo para binarios VFP 9 / Only for VFP 9 binaries)
*
*
DEFINE CLASS contdatepicker AS container 
 	*< CLASSDATA: Baseclass="container" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="txtDatePicker" UniqueID="" Timestamp="" />

	BackStyle = 0
	BorderWidth = 0
	Height = 23
	Name = "contdatepicker"
	Width = 100

	ADD OBJECT 'txtDatePicker' AS textdatepicker WITH ;
		Name = "txtDatePicker"
		*< END OBJECT: ClassLib="datepicker.vcx" BaseClass="textbox" />
	
	PROCEDURE Resize
		STORE This.Width - This.txtDatePicker_DP.Width TO This.txtDatePicker.Width, This.txtDatePicker_DP.Left
		
	ENDPROC

ENDDEFINE

DEFINE CLASS formdatepicker AS form 
 	*< CLASSDATA: Baseclass="form" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="btnMenu" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pgfViews" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pgfViews.pagDays.lblMon" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pgfViews.pagDays.lblTue" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pgfViews.pagDays.lblWed" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pgfViews.pagDays.lblThu" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pgfViews.pagDays.lblFri" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pgfViews.pagDays.lblSat" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pgfViews.pagDays.lblSun" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pgfViews.pagHours.opgMeridian" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pgfViews.pagHours.spnHour" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pgfViews.pagHours.spnMinute" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pgfViews.pagHours.spnSecond" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pgfViews.pagHours.lblMinP1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pgfViews.pagHours.lblMinP2" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pgfViews.pagHours.lblMinP3" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pgfViews.pagHours.lblMinN3" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pgfViews.pagHours.lblMinN2" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pgfViews.pagHours.lblMinN1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pgfViews.pagHours.lblHouP1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pgfViews.pagHours.lblHouP2" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pgfViews.pagHours.lblHouP3" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pgfViews.pagHours.lblHouN3" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pgfViews.pagHours.lblHouN2" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pgfViews.pagHours.lblHouN1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pgfViews.pagCenturies.lstCentury" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pgfViews.pagCenturies.lstYear" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblContext" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="btnSet" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="btnPrevious" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="btnNext" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblSelected" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblSelectedTime" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="btnToday" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="btnNow" UniqueID="" Timestamp="" />

	*<DefinedPropArrayMethod>
		*m: entershape
		*m: indexedstring		&& Returns an indexed string.
		*m: leaveshape
		*m: menuselection
		*m: movedate		&& Moves a date by a number of months.
		*m: movereference
		*m: pickday
		*m: pickhour
		*m: pickminute
		*m: pickmonth
		*m: pickyear
		*m: populatecenturies		&& Populate the century centered editor.
		*m: populatedays
		*m: populatemonths
		*m: populateyears
		*m: referencedate_assign
		*m: selectday
		*m: selecteddate_assign
		*m: selectedtime_assign
		*m: setdate		&& Sets the date and closes the date picker.
		*m: string		&& Returns a string from a predefined vocabulary.
		*p: calendarindex		&& Calendar in use (0 = system).
		*p: calendars		&& Collection of alternative calendars.
		*p: datebordercolor		&& Border color for date tiles.
		*p: eventbackcolor		&& Back color for day tiles linked to any event(s).
		*p: isdatetime		&& Pick also the time portion of a date.
		*p: maxyear		&& The maximum year of the calendrical system.
		*p: menuname		&& The name of the date picker menu.
		*p: minyear		&& The minimum year of the calendrical system.
		*p: nosystemcalendar		&& If set, do not use the system calendar.
		*p: previouspage		&& Previous active page.
		*p: referencedate
		*p: selecteddate		&& Selected date value.
		*p: selecteddatebordercolor		&& Border color for selected date's tile.
		*p: selectedtime		&& The time portion of the selected time (in seconds).
		*p: targetcontrol
		*p: todaybackcolor		&& Back color for today's tile.
		*p: uselastselecteddate		&& Use last selected date instead of DATE() for initially empty dates.
		*p: _memberdata		&& XML Metadata for customizable properties
	*</DefinedPropArrayMethod>

	BorderStyle = 0
	calendarindex = 0		&& Calendar in use (0 = system).
	calendars = .NULL.		&& Collection of alternative calendars.
	Caption = ""
	DataSession = 1
	datebordercolor = (RGB(64, 64, 64))		&& Border color for date tiles.
	Desktop = .T.
	DoCreate = .T.
	eventbackcolor = ( RGB(221, 221, 221))		&& Back color for day tiles linked to any event(s).
	Height = 370
	isdatetime = .NULL.		&& Pick also the time portion of a date.
	KeyPreview = .T.
	MaxButton = .F.
	maxyear = 9999		&& The maximum year of the calendrical system.
	menuname = 		&& The name of the date picker menu.
	MinButton = .F.
	minyear = 1753		&& The minimum year of the calendrical system.
	Name = "formdatepicker"
	nosystemcalendar = .F.		&& If set, do not use the system calendar.
	previouspage = 0		&& Previous active page.
	referencedate = (DATE())
	selecteddate = {}		&& Selected date value.
	selecteddatebordercolor = (RGB(0, 0, 160))		&& Border color for selected date's tile.
	selectedtime = (CTOT(""))		&& The time portion of the selected time (in seconds).
	ShowTips = .T.
	targetcontrol = .NULL.
	todaybackcolor = (RGB(160, 255, 255))		&& Back color for today's tile.
	uselastselecteddate = .F.		&& Use last selected date instead of DATE() for initially empty dates.
	Width = 340
	_memberdata = <VFPData>
		<memberdata name="getstring" type="method" display="GetString"/>
		<memberdata name="strings" type="property" display="Strings"/>
		<memberdata name="_strings" type="property" display="_Strings"/>
		<memberdata name="_stringsloaded" type="property" display="_StringsLoaded"/>
		<memberdata name="leaveshape" type="method" display="LeaveShape"/>
		<memberdata name="entershape" type="method" display="EnterShape"/>
		<memberdata name="pickday" type="method" display="PickDay"/>
		<memberdata name="pickmonth" type="method" display="PickMonth"/>
		<memberdata name="pickyear" type="method" display="PickYear"/>
		<memberdata name="populatedays" type="method" display="PopulateDays"/>
		<memberdata name="referencedate" type="property" display="ReferenceDate"/>
		<memberdata name="selectday" type="method" display="SelectDay"/>
		<memberdata name="populatemonths" type="method" display="PopulateMonths"/>
		<memberdata name="populateyears" type="method" display="PopulateYears"/>
		<memberdata name="targetcontrol" type="property" display="TargetControl"/>
		<memberdata name="selecteddatebordercolor" type="property" display="SelectedDateBorderColor"/>
		<memberdata name="todaybackcolor" type="property" display="TodayBackColor"/>
		<memberdata name="selecteddate" type="property" display="SelectedDate"/>
		<memberdata name="datebordercolor" type="property" display="DateBorderColor"/>
		<memberdata name="setdate" type="method" display="SetDate"/>
		<memberdata name="selectedtime" type="property" display="SelectedTime"/>
		<memberdata name="isdatetime" type="property" display="IsDatetime"/>
		<memberdata name="previouspage" type="property" display="PreviousPage"/>
		<memberdata name="maxyear" type="property" display="MaxYear"/>
		<memberdata name="minyear" type="property" display="MinYear"/>
		<memberdata name="populatecenturies" type="method" display="PopulateCenturies"/>
		<memberdata name="movedate" type="method" display="MoveDate"/>
		<memberdata name="menuselection" type="method" display="MenuSelection"/>
		<memberdata name="menuname" type="property" display="MenuName"/>
		<memberdata name="calendars" type="property" display="Calendars"/>
		<memberdata name="calendarindex" type="property" display="CalendarIndex"/>
		<memberdata name="eventbackcolor" type="property" display="EventBackColor"/>
		<memberdata name="nosystemcalendar" type="property" display="NoSystemCalendar"/>
		<memberdata name="string" type="method" display="String"/>
		<memberdata name="indexedstring" type="method" display="IndexedString"/>
		<memberdata name="uselastselecteddate" type="property" display="UseLastSelectedDate"/>
		<memberdata name="movereference" type="method" display="MoveReference"/>
		<memberdata name="pickminute" type="method" display="PickMinute"/>
		<memberdata name="pickhour" type="method" display="PickHour"/>
		</VFPData>		&& XML Metadata for customizable properties

	ADD OBJECT 'btnMenu' AS image WITH ;
		Height = 16, ;
		Left = 8, ;
		Name = "btnMenu", ;
		Stretch = 1, ;
		Top = 12, ;
		Width = 16
		*< END OBJECT: BaseClass="image" />

	ADD OBJECT 'btnNext' AS image WITH ;
		Height = 16, ;
		Left = 316, ;
		Name = "btnNext", ;
		Stretch = 1, ;
		Top = 12, ;
		Width = 16
		*< END OBJECT: BaseClass="image" />

	ADD OBJECT 'btnNow' AS image WITH ;
		Height = 16, ;
		Left = 8, ;
		Name = "btnNow", ;
		Stretch = 1, ;
		Top = 348, ;
		Width = 16
		*< END OBJECT: BaseClass="image" />

	ADD OBJECT 'btnPrevious' AS image WITH ;
		Height = 16, ;
		Left = 284, ;
		Name = "btnPrevious", ;
		Stretch = 1, ;
		Top = 12, ;
		Width = 16
		*< END OBJECT: BaseClass="image" />

	ADD OBJECT 'btnSet' AS image WITH ;
		Height = 16, ;
		Left = 252, ;
		Name = "btnSet", ;
		Stretch = 1, ;
		Top = 12, ;
		Width = 16
		*< END OBJECT: BaseClass="image" />

	ADD OBJECT 'btnToday' AS image WITH ;
		Height = 16, ;
		Left = 8, ;
		Name = "btnToday", ;
		Stretch = 1, ;
		Top = 328, ;
		Width = 16
		*< END OBJECT: BaseClass="image" />

	ADD OBJECT 'lblContext' AS label WITH ;
		AutoSize = .T., ;
		BackStyle = 0, ;
		Caption = "", ;
		FontName = "Segoe UI", ;
		FontSize = 11, ;
		Left = 32, ;
		Name = "lblContext", ;
		Top = 8, ;
		ZOrderSet = 3
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'lblSelected' AS label WITH ;
		AutoSize = .T., ;
		BackStyle = 0, ;
		Caption = "", ;
		FontName = "Segoe UI", ;
		Height = 17, ;
		Left = 32, ;
		Name = "lblSelected", ;
		Top = 327, ;
		Width = 2, ;
		ZOrderSet = 7
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'lblSelectedTime' AS label WITH ;
		AutoSize = .T., ;
		BackStyle = 0, ;
		Caption = "", ;
		FontName = "Segoe UI", ;
		Height = 17, ;
		Left = 32, ;
		Name = "lblSelectedTime", ;
		Top = 347, ;
		Width = 2, ;
		ZOrderSet = 8
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'pgfViews' AS pageframe WITH ;
		BorderWidth = 0, ;
		ErasePage = .T., ;
		Height = 280, ;
		Name = "pgfViews", ;
		PageCount = 5, ;
		Tabs = .F., ;
		Top = 40, ;
		Width = 340, ;
		ZOrderSet = 2, ;
		Page1.Caption = "", ;
		Page1.Name = "pagDays", ;
		Page2.Caption = "", ;
		Page2.Name = "pagMonths", ;
		Page3.Caption = "", ;
		Page3.Name = "pagYears", ;
		Page4.Caption = "", ;
		Page4.Name = "pagHours", ;
		Page5.Caption = "", ;
		Page5.Name = "pagCenturies"
		*< END OBJECT: BaseClass="pageframe" />

	ADD OBJECT 'pgfViews.pagCenturies.lstCentury' AS combobox WITH ;
		Alignment = 2, ;
		FontName = "Segoe UI", ;
		Height = 36, ;
		Left = 86, ;
		Name = "lstCentury", ;
		SelectOnEntry = .T., ;
		Style = 2, ;
		Top = 122, ;
		Width = 76
		*< END OBJECT: BaseClass="combobox" />

	ADD OBJECT 'pgfViews.pagCenturies.lstYear' AS combobox WITH ;
		Alignment = 2, ;
		FontName = "Segoe UI", ;
		Height = 36, ;
		Left = 178, ;
		Name = "lstYear", ;
		SelectOnEntry = .T., ;
		Style = 2, ;
		Top = 122, ;
		Width = 76
		*< END OBJECT: BaseClass="combobox" />

	ADD OBJECT 'pgfViews.pagDays.lblFri' AS label WITH ;
		AutoSize = .T., ;
		BackStyle = 0, ;
		Caption = "F", ;
		FontName = "Segoe UI", ;
		Left = 211, ;
		Name = "lblFri", ;
		Top = 8
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'pgfViews.pagDays.lblMon' AS label WITH ;
		AutoSize = .T., ;
		BackStyle = 0, ;
		Caption = "M", ;
		FontName = "Segoe UI", ;
		Left = 21, ;
		Name = "lblMon", ;
		Top = 8
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'pgfViews.pagDays.lblSat' AS label WITH ;
		AutoSize = .T., ;
		BackStyle = 0, ;
		Caption = "S", ;
		FontName = "Segoe UI", ;
		Left = 260, ;
		Name = "lblSat", ;
		Top = 8
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'pgfViews.pagDays.lblSun' AS label WITH ;
		AutoSize = .T., ;
		BackStyle = 0, ;
		Caption = "S", ;
		FontName = "Segoe UI", ;
		Height = 17, ;
		Left = 307, ;
		Name = "lblSun", ;
		Top = 8, ;
		Width = 8
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'pgfViews.pagDays.lblThu' AS label WITH ;
		AutoSize = .T., ;
		BackStyle = 0, ;
		Caption = "T", ;
		FontName = "Segoe UI", ;
		Left = 162, ;
		Name = "lblThu", ;
		Top = 8
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'pgfViews.pagDays.lblTue' AS label WITH ;
		AutoSize = .T., ;
		BackStyle = 0, ;
		Caption = "T", ;
		FontName = "Segoe UI", ;
		Left = 67, ;
		Name = "lblTue", ;
		Top = 8
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'pgfViews.pagDays.lblWed' AS label WITH ;
		AutoSize = .T., ;
		BackStyle = 0, ;
		Caption = "W", ;
		FontName = "Segoe UI", ;
		Left = 114, ;
		Name = "lblWed", ;
		Top = 8
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'pgfViews.pagHours.lblHouN1' AS label WITH ;
		AutoSize = .T., ;
		BackStyle = 0, ;
		Caption = "00", ;
		FontName = "Segoe UI", ;
		FontSize = 11, ;
		ForeColor = 128,128,128, ;
		Height = 22, ;
		Left = 92, ;
		Name = "lblHouN1", ;
		Top = 84, ;
		Width = 18
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'pgfViews.pagHours.lblHouN2' AS label WITH ;
		AutoSize = .T., ;
		BackStyle = 0, ;
		Caption = "00", ;
		FontName = "Segoe UI", ;
		FontSize = 11, ;
		ForeColor = 128,128,128, ;
		Height = 22, ;
		Left = 92, ;
		Name = "lblHouN2", ;
		Top = 56, ;
		Width = 18
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'pgfViews.pagHours.lblHouN3' AS label WITH ;
		AutoSize = .T., ;
		BackStyle = 0, ;
		Caption = "00", ;
		FontName = "Segoe UI", ;
		FontSize = 11, ;
		ForeColor = 128,128,128, ;
		Height = 22, ;
		Left = 92, ;
		Name = "lblHouN3", ;
		Top = 28, ;
		Width = 18
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'pgfViews.pagHours.lblHouP1' AS label WITH ;
		AutoSize = .T., ;
		BackStyle = 0, ;
		Caption = "00", ;
		FontName = "Segoe UI", ;
		FontSize = 11, ;
		ForeColor = 128,128,128, ;
		Height = 22, ;
		Left = 92, ;
		Name = "lblHouP1", ;
		Top = 168, ;
		Width = 18
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'pgfViews.pagHours.lblHouP2' AS label WITH ;
		AutoSize = .T., ;
		BackStyle = 0, ;
		Caption = "00", ;
		FontName = "Segoe UI", ;
		FontSize = 11, ;
		ForeColor = 128,128,128, ;
		Height = 22, ;
		Left = 92, ;
		Name = "lblHouP2", ;
		Top = 196, ;
		Width = 18
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'pgfViews.pagHours.lblHouP3' AS label WITH ;
		AutoSize = .T., ;
		BackStyle = 0, ;
		Caption = "00", ;
		FontName = "Segoe UI", ;
		FontSize = 11, ;
		ForeColor = 128,128,128, ;
		Height = 22, ;
		Left = 92, ;
		Name = "lblHouP3", ;
		Top = 224, ;
		Width = 18
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'pgfViews.pagHours.lblMinN1' AS label WITH ;
		AutoSize = .T., ;
		BackStyle = 0, ;
		Caption = "00", ;
		FontName = "Segoe UI", ;
		FontSize = 11, ;
		ForeColor = 128,128,128, ;
		Height = 22, ;
		Left = 180, ;
		Name = "lblMinN1", ;
		Top = 84, ;
		Width = 18
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'pgfViews.pagHours.lblMinN2' AS label WITH ;
		AutoSize = .T., ;
		BackStyle = 0, ;
		Caption = "00", ;
		FontName = "Segoe UI", ;
		FontSize = 11, ;
		ForeColor = 128,128,128, ;
		Height = 22, ;
		Left = 180, ;
		Name = "lblMinN2", ;
		Top = 56, ;
		Width = 18
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'pgfViews.pagHours.lblMinN3' AS label WITH ;
		AutoSize = .T., ;
		BackStyle = 0, ;
		Caption = "00", ;
		FontName = "Segoe UI", ;
		FontSize = 11, ;
		ForeColor = 128,128,128, ;
		Height = 22, ;
		Left = 180, ;
		Name = "lblMinN3", ;
		Top = 28, ;
		Width = 18
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'pgfViews.pagHours.lblMinP1' AS label WITH ;
		AutoSize = .T., ;
		BackStyle = 0, ;
		Caption = "00", ;
		FontName = "Segoe UI", ;
		FontSize = 11, ;
		ForeColor = 128,128,128, ;
		Height = 22, ;
		Left = 180, ;
		Name = "lblMinP1", ;
		Top = 168, ;
		Width = 18
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'pgfViews.pagHours.lblMinP2' AS label WITH ;
		AutoSize = .T., ;
		BackStyle = 0, ;
		Caption = "00", ;
		FontName = "Segoe UI", ;
		FontSize = 11, ;
		ForeColor = 128,128,128, ;
		Height = 22, ;
		Left = 180, ;
		Name = "lblMinP2", ;
		Top = 196, ;
		Width = 18
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'pgfViews.pagHours.lblMinP3' AS label WITH ;
		AutoSize = .T., ;
		BackStyle = 0, ;
		Caption = "00", ;
		FontName = "Segoe UI", ;
		FontSize = 11, ;
		ForeColor = 128,128,128, ;
		Height = 22, ;
		Left = 180, ;
		Name = "lblMinP3", ;
		Top = 224, ;
		Width = 18
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'pgfViews.pagHours.opgMeridian' AS optiongroup WITH ;
		AutoSize = .T., ;
		BackStyle = 0, ;
		ButtonCount = 2, ;
		Left = 12, ;
		Name = "opgMeridian", ;
		TabIndex = 1, ;
		Top = 116, ;
		Option1.AutoSize = .T., ;
		Option1.BackStyle = 0, ;
		Option1.Caption = "AM", ;
		Option1.FontName = "Segoe UI", ;
		Option1.Height = 17, ;
		Option1.Left = 5, ;
		Option1.Name = "Option1", ;
		Option1.Top = 5, ;
		Option1.Width = 37, ;
		Option2.AutoSize = .T., ;
		Option2.BackStyle = 0, ;
		Option2.Caption = "PM", ;
		Option2.FontName = "Segoe UI", ;
		Option2.Height = 17, ;
		Option2.Left = 5, ;
		Option2.Name = "Option2", ;
		Option2.Top = 24, ;
		Option2.Width = 36
		*< END OBJECT: BaseClass="optiongroup" />

	ADD OBJECT 'pgfViews.pagHours.spnHour' AS spinner WITH ;
		Alignment = 2, ;
		FontName = "Segoe UI", ;
		FontSize = 11, ;
		Format = "LK", ;
		Height = 44, ;
		InputMask = "99", ;
		KeyboardHighValue = 23, ;
		KeyboardLowValue = 0, ;
		Left = 68, ;
		Margin = 8, ;
		Name = "spnHour", ;
		SpinnerHighValue = 23.00, ;
		SpinnerLowValue = 0.00, ;
		TabIndex = 2, ;
		Top = 116, ;
		Width = 76
		*< END OBJECT: BaseClass="spinner" />

	ADD OBJECT 'pgfViews.pagHours.spnMinute' AS spinner WITH ;
		Alignment = 2, ;
		FontName = "Segoe UI", ;
		FontSize = 11, ;
		Format = "LK", ;
		Height = 44, ;
		InputMask = "99", ;
		KeyboardHighValue = 59, ;
		KeyboardLowValue = 0, ;
		Left = 156, ;
		Margin = 8, ;
		Name = "spnMinute", ;
		SpinnerHighValue = 59.00, ;
		SpinnerLowValue = 0.00, ;
		TabIndex = 3, ;
		Top = 116, ;
		Width = 76
		*< END OBJECT: BaseClass="spinner" />

	ADD OBJECT 'pgfViews.pagHours.spnSecond' AS spinner WITH ;
		Alignment = 2, ;
		FontName = "Segoe UI", ;
		FontSize = 11, ;
		Format = "LK", ;
		Height = 44, ;
		InputMask = "99", ;
		KeyboardHighValue = 59, ;
		KeyboardLowValue = 0, ;
		Left = 244, ;
		Margin = 8, ;
		Name = "spnSecond", ;
		SpinnerHighValue = 59.00, ;
		SpinnerLowValue = 0.00, ;
		TabIndex = 4, ;
		Top = 116, ;
		Width = 76
		*< END OBJECT: BaseClass="spinner" />
	
	PROCEDURE Deactivate
		* in case the form deactivates, release immediately (no result returned)
		
		DODEFAULT()
		This.SelectedDate = .NULL.
		This.Release()
		
	ENDPROC

	PROCEDURE Destroy
		* clean up the event bidings, and the popups that were defined
		
		DODEFAULT()
		UNBINDEVENTS(This)
		
		RELEASE POPUPS (Thisform.MenuName) EXTENDED
		IF !ISNULL(This.Calendars) AND This.Calendars.Count > 0
			RELEASE POPUPS (Thisform.MenuName + "_cal") EXTENDED
		ENDIF
		
	ENDPROC

	PROCEDURE entershape
		LPARAMETERS nButton, nShift, nXCoord, nYCoord
		LOCAL ARRAY EventInfo(1)
		LOCAL SourceObject AS Shape
		
		AEVENTS(m.EventInfo, 0)
		m.SourceObject = m.EventInfo(1)
		
		* when the user enters a shape, this will be signaled with a border
		m.SourceObject.BorderStyle = 1
	ENDPROC

	PROCEDURE indexedstring		&& Returns an indexed string.
		LPARAMETERS StringCode AS String, StringIndex AS Integer
		LOCAL Source AS String
		LOCAL Cal AS CalendarCalc
		
		m.Source = ""
		IF This.CalendarIndex != 0
			m.Cal = This.Calendars(This.CalendarIndex)
			DO CASE
			CASE m.StringCode == "MONTHS"
				m.Source = m.Cal.MonthName(m.StringIndex, m.Cal.Year)
			CASE m.StringCode == "SHORT_MONTHS"
				m.Source = m.Cal.MonthName(m.StringIndex, m.Cal.Year, .T.)
			CASE m.StringCode == "INIT_WDAYS"
				m.Source = m.Cal.WeekdayName(m.Cal.Year, m.Cal.Month, m.Cal.Day, .T.)
			ENDCASE
		ENDIF
		
		RETURN EVL(m.Source, STREXTRACT(This.String(m.StringCode), TEXTMERGE(":<<m.StringIndex>>:"), ":"))
		
	ENDPROC

	PROCEDURE Init
		LPARAMETERS TargetControl AS TextDatePicker
		LOCAL ObjName AS String, ObjReference AS Object, BaseReference AS Shape, RowIndex AS Integer, ColIndex AS Integer
		LOCAL WDayReference AS Label
		LOCAL LoopIndex AS Integer
		LOCAL LoopIndexStr AS String
		
		IF !DODEFAULT()
			RETURN .F.
		ENDIF
		
		* if no date is set, or the form was launched on its own (no target control), start with today
		IF PCOUNT() = 0 OR ISNULL(m.TargetControl) OR ISNULL(m.TargetControl.Value) OR EMPTY(m.TargetControl.Value)
			* unless we want to use the last selected date
			IF This.UseLastSelectedDate
				IF TYPE("_Screen._dp_LastSelectedDate") != "D"
					REMOVEPROPERTY(_Screen, "_dp_LastSelectedDate")
					ADDPROPERTY(_Screen, "_dp_LastSelectedDate", DATE())
				ENDIF
				This.ReferenceDate = EVL(NVL(_Screen._dp_LastSelectedDate, {}), DATE())
			ELSE
				This.ReferenceDate = DATE()
			ENDIF
			IF PCOUNT() = 1
				This.TargetControl = m.TargetControl
			ENDIF
		ELSE
			* get the start date from the value of the target control
			This.ReferenceDate = DATE(YEAR(m.TargetControl.Value), MONTH(m.TargetControl.Value), DAY(m.TargetControl.Value))
			This.TargetControl = m.TargetControl
		ENDIF
		
		* use target control's calendars, if set (otherwise, use the ones from the class/form)
		IF !ISNULL(This.TargetControl) AND ISNULL(This.Calendars)
			This.Calendars = This.TargetControl.Calendars
			IF !ISNULL(This.Calendars) AND This.Calendars.Count != 0
				IF BETWEEN(This.TargetControl.CalendarIndex, 0, This.Calendars.Count)
					This.CalendarIndex = This.TargetControl.CalendarIndex
				ENDIF
				* if there are calendar that were set at the target control, we may skip the system calendar (if commanded) 
				This.NoSystemCalendar = This.CalendarIndex != 0 AND This.TargetControl.NoSystemCalendar
			ENDIF
		ENDIF
		
		* the start date is the reference date, and the selected (picked) date so far 
		This.SelectedDate = This.ReferenceDate
		
		* if the datetime is not set, set it by reading the type of the target control value or control source
		IF ISNULL(This.IsDatetime)
			IF !ISNULL(m.TargetControl)
				This.IsDatetime = m.TargetControl.IsDatetime OR TYPE("m.TargetControl.Value") == "T" OR TYPE(m.TargetControl.ControlSource) == "T"
			ELSE
				* otherwise, pick only the date
				This.IsDatetime = .F.
			ENDIF
		ENDIF
		
		* if we don't have a target control, or won't pick the time portion of the date
		IF ISNULL(m.TargetControl) OR !This.IsDatetime
			* remove the time visual controls
			This.Height = This.Height - (This.lblSelectedTime.Top - This.lblSelected.Top)
			STORE .F. TO This.lblSelectedTime.Visible, This.btnNow.Visible
		ELSE
			IF !ISNULL(m.TargetControl)
				* in this case, we have a target control and time to be picked
				* do we need the seconds?
				IF m.TargetControl.Seconds = 0 OR (m.TargetControl.Seconds = 2 AND SET("Seconds") == "OFF")
					This.pgfViews.pagHours.spnSecond.Enabled = .F.
				ENDIF
				* are we using 24 or 12 hours display?
				IF m.TargetControl.Hours = 24 OR (m.TargetControl.Hours = 0 AND SET("Hours") == 24)
					This.pgfViews.pagHours.opgMeridian.Visible = .F.
				ELSE
					* if 12 hours-display, values above 12 will be stripped from the spinner
					WITH This.pgfViews.pagHours
						WITH .spnHour
							.KeyboardHighValue = 12
							.KeyboardLowValue = 1
							.SpinnerHighValue = 12
							.SpinnerLowValue = 1
						ENDWITH
						STORE .F. TO .lblHouN1.Visible, .lblHouN2.Visible, .lblHouN3.Visible, ;
							.lblHouP1.Visible, .lblHouP2.Visible, .lblHouP3.Visible
					ENDWITH
				ENDIF
				* set the time, and signal we'll pick the time portion
				This.SelectedTime = IIF(TYPE("m.TargetControl.Value") == "T", m.TargetControl.Value, DTOT(NVL(m.TargetControl.Value, DATETIME())))
			ELSE
				This.SelectedTime = DTOT(This.ReferenceDate)
			ENDIF
		ENDIF
		
		* create the date picker menu (it will be available inside the form)
		This.MenuName = "dpMenu" + SYS(2015)
		
		DEFINE POPUP (This.MenuName) IN (Thisform.Name) ;
			FONT "Segoue UI", 9 ;
			SHORTCUT
		
		DEFINE BAR 1 OF (This.MenuName) PROMPT This.String("MENU-1")
		DEFINE BAR 2 OF (This.MenuName) PROMPT This.String("MENU-2")
		DEFINE BAR 3 OF (This.MenuName) PROMPT "\-"
		DEFINE BAR 4 OF (This.MenuName) PROMPT This.String("MENU-4") SKIP FOR !Thisform.IsDatetime
		DEFINE BAR 5 OF (This.MenuName) PROMPT This.String("MENU-5")
		DEFINE BAR 6 OF (This.MenuName) PROMPT This.String("MENU-6")
		DEFINE BAR 7 OF (This.MenuName) PROMPT This.String("MENU-7")
		DEFINE BAR 8 OF (This.MenuName) PROMPT This.String("MENU-8")
		DEFINE BAR 9 OF (This.MenuName) PROMPT "\-"
		DEFINE BAR 10 OF (This.MenuName) PROMPT This.String("MENU-10")
		DEFINE BAR 11 OF (This.MenuName) PROMPT This.String("MENU-11") SKIP FOR !Thisform.IsDatetime
		
		ON SELECTION POPUP (This.MenuName) _Screen.ActiveForm.MenuSelection(BAR())
		
		* create a sub-menu for calendar switching (if there are calendars to switch to)
		IF !ISNULL(This.Calendars) AND This.Calendars.Count != 0 AND (This.Calendars.Count > 1 OR !Thisform.NoSystemCalendar)
			DEFINE BAR 12 OF (This.MenuName) PROMPT "\-"
			DEFINE BAR 13 OF (This.MenuName) PROMPT This.String("MENU-13")
			ON BAR 13 OF (This.MenuName) ACTIVATE POPUP (This.MenuName + "_cal")
		
			DEFINE POPUP (This.MenuName + "_cal") IN (Thisform.Name) ;
				FONT "Segoe UI", 9 ;
				SHORTCUT
		
			DEFINE BAR 1 OF (Thisform.MenuName + "_cal") PROMPT This.String("MENU-13-1") SKIP FOR Thisform.NoSystemCalendar OR Thisform.CalendarIndex = 0
		
			FOR m.LoopIndex = 1 TO This.Calendars.Count
				m.LoopIndexStr = TRANSFORM(m.LoopIndex)
				DEFINE BAR (m.LoopIndex + 1) OF (This.MenuName + "_cal") ;
					PROMPT This.Calendars.GetKey(m.LoopIndex) ;
					SKIP FOR Thisform.CalendarIndex = &LoopIndexStr.
			ENDFOR
		
			ON SELECTION POPUP (This.MenuName + "_cal") _Screen.ActiveForm.MenuSelection(13, BAR())
		
		ENDIF
		
		* everything is ready to go: start with a month view of the days
		This.PopulateDays()
		This.pgfViews.ActivePage = This.pgfViews.pagDays.PageOrder
		
	ENDPROC

	PROCEDURE KeyPress
		LPARAMETERS nKeyCode, nShiftAltCtrl
		
		* Contributed by John Ryan @ LevelExtreme (https://www.levelextreme.com/ViewPageGenericLogin.aspx)
		* Message ID: 1662179
		
		DO CASE
		
		CASE m.nKeyCode = 27 OR m.nKeyCode = 107 AND m.nShiftAltCtrl = 4	&& Escape, Alt F4
			NODEFAULT
			This.Release()
		
		CASE m.nKeyCode = 13 AND m.nShiftAltCtrl=0 OR m.nKeyCode = 10 AND m.nShiftAltCtrl = 2	&& Enter or Ctrl+enter
			This.SetDate(This.SelectedDate)
		
		CASE This.pgfViews.ActivePage = This.pgfViews.pagHours.PageOrder	&& doing time, so need arrows to work
			DODEFAULT(m.nKeyCode, m.nShiftAltCtrl)
				
		CASE m.nKeyCode = 5 AND m.nShiftAltCtrl=0	&& Up Arrow
			NODEFAULT
			This.MoveReference(-7, -4, -48)
		
		CASE m.nKeyCode=24 AND m.nShiftAltCtrl = 0	&& Down Arrow
			NODEFAULT 
			This.MoveReference(7, 4, 48)
		
		CASE m.nKeyCode = 19 AND m.nShiftAltCtrl = 0	&& Left arrow
			NODEFAULT
			This.MoveReference(-1, -1, -12)
		
		CASE m.nKeyCode = 4 AND m.nShiftAltCtrl = 0	&& Right arrow
			NODEFAULT
			This.MoveReference(1, 1, 12)
		
		CASE m.nKeyCode = 18 AND m.nShiftAltCtrl = 0	&& PageUp
			NODEFAULT
			This.MoveReference(-99, -12, -144)
		
		CASE m.nKeyCode=3 AND m.nShiftAltCtrl=0	&& PageDown
			NODEFAULT
			This.MoveReference(99, 12, 144)
		
		CASE m.nKeyCode = 1 AND m.nShiftAltCtrl = 0	&& Home: go to first day of month
			This.SelectedDate = This.SelectedDate - Day(This.SelectedDate) + 1
			This.MoveReference(0, 0, 0)
		
		CASE m.nKeyCode = 29 AND m.nShiftAltCtrl = 2 && Ctrl+Home = today
			NODEFAULT
			This.SelectedDate = Date()
			This.MoveReference(0, 0, 0)
		
		CASE m.nKeyCode = 116 AND m.nShiftAltCtrl=0 OR m.nKeyCode = 84 AND m.nShiftAltCtrl = 1	&& t or T = time
			IF This.IsDatetime
				*---only if time enabled!
				NODEFAULT
				This.lblSelectedTime.Click()
			ENDIF
			
		OTHERWISE
			DODEFAULT(m.nKeyCode, m.nShiftAltCtrl)
		ENDCASE
	ENDPROC

	PROCEDURE leaveshape
		LPARAMETERS nButton, nShift, nXCoord, nYCoord
		LOCAL ARRAY EventInfo(1)
		LOCAL SourceObject AS Shape
		
		AEVENTS(m.EventInfo, 0)
		m.SourceObject = m.EventInfo(1)
		
		* remove the border when leaving a tile (unless it's the selected date)
		IF !m.SourceObject.Selectable OR m.SourceObject.ReferenceDate != This.SelectedDate
			m.SourceObject.BorderStyle = 0
		ENDIF
		
	ENDPROC

	PROCEDURE menuselection
		LPARAMETERS Choice AS Integer, SubChoice AS Integer
		
		* menu actions on user selection
		
		DO CASE
		
		CASE m.Choice = 1
			This.btnSet.Click()
		
		CASE m.Choice = 2
			This.Release()
		
		CASE m.Choice = 4
			This.lblSelectedTime.Click()
		
		CASE m.Choice = 5
			This.PopulateDays()
			This.pgfViews.ActivePage = This.pgfViews.pagDays.PageOrder
		
		CASE m.Choice = 6
			This.PopulateMonths()
			This.pgfViews.ActivePage = This.pgfViews.pagMonths.PageOrder
		
		CASE m.Choice = 7
			This.PopulateYears()
			This.pgfViews.ActivePage = This.pgfViews.pagYears.PageOrder
		
		CASE m.Choice = 8
			Thisform.PopulateCenturies()
			Thisform.pgfViews.ActivePage = Thisform.pgfViews.pagCenturies.PageOrder
		
		CASE m.Choice = 10
			This.btnToday.Click()
		
		CASE m.Choice = 11
			This.btnNow.Click()
		
		CASE m.Choice = 13
			This.CalendarIndex = m.SubChoice - 1
			This.pgfViews.pagCenturies.lstCentury.Init()
			This.SelectedDate = This.SelectedDate
			DO CASE
			CASE This.pgfViews.ActivePage = This.pgfViews.pagMonths.PageOrder
				This.PopulateMonths()
			CASE This.pgfViews.ActivePage = This.pgfViews.pagYears.PageOrder
				This.PopulateYears()
			OTHERWISE
				This.PopulateDays()
				This.pgfViews.ActivePage = This.pgfViews.pagDays.PageOrder
			ENDCASE
		ENDCASE
		
	ENDPROC

	PROCEDURE movedate		&& Moves a date by a number of months.
		LPARAMETERS Start AS Date, Months AS Integer
		LOCAL MoveToAbsMonths AS Integer
		LOCAL FollowingMonh AS Date
		LOCAL MoveToDate AS Date
		
		* move a date by months - accurate for 12-month/year calendars
		
		* system calendar
		IF This.CalendarIndex = 0
			m.MoveToAbsMonths = (YEAR(m.Start) * 12) + (MONTH(m.Start) - 1) + m.Months
		
			m.MoveToDate = DATE(INT(m.MoveToAbsMonths / 12), (m.MoveToAbsMonths % 12) + 1, 1)
			m.FollowingMonh = DATE(INT((m.MoveToAbsMonths + 1) / 12), ((m.MoveToAbsMonths + 1) % 12) + 1, 1)
		
			TRY
				m.MoveToDate = DATE(YEAR(m.MoveToDate), MONTH(m.MoveToDate), DAY(m.Start))
			CATCH
				m.MoveToDate = m.FollowingMonh - 1
			ENDTRY
		ELSE
			* current non-sytem calendar
			WITH This.Calendars(This.CalendarIndex) AS CalendarCalc
				.FromSystem(m.Start)
				IF m.Months / 12 = INT(m.Months / 12)
					.YearsAdd(m.Months / 12)
				ELSE
					.MonthsAdd(m.Months)
				ENDIF
				m.MoveToDate = .ToSystem()
			ENDWITH
		ENDIF
		
		RETURN m.MoveToDate
		
	ENDPROC

	PROCEDURE movereference
		LPARAMETERS Days, Months, Years
		
		DO CASE
		
		CASE This.pgfViews.ActivePage = This.pgfViews.pagDays.PageOrder
			
			IF ABS(m.Days) != 99
				This.SelectedDate = This.SelectedDate + m.Days
			ELSE
				*--- +-99 means move a month
				This.SelectedDate = This.MoveDate(This.SelectedDate, IIF(m.Days < 0, -1, 1))
			ENDIF
			This.ReferenceDate = This.SelectedDate
			This.PopulateDays()	
		
		CASE This.pgfViews.ActivePage = This.pgfViews.pagMonths.PageOrder
			This.SelectedDate = Thisform.MoveDate(This.SelectedDate, m.Months)
			This.ReferenceDate = This.SelectedDate
			This.PopulateMonths()
		
		CASE Thisform.pgfViews.ActivePage = Thisform.pgfViews.pagYears.PageOrder
			This.SelectedDate = This.MoveDate(This.SelectedDate, m.Years)
			This.Referencedate = This.SelectedDate
			This.PopulateYears()
		
		ENDCASE
	ENDPROC

	PROCEDURE pickday
		LOCAL ARRAY EventInfo(1)
		LOCAL SourceObject AS Shape
		
		AEVENTS(m.EventInfo, 0)
		m.SourceObject = m.EventInfo(1)
		
		* set the date from the picked day, and leave
		This.SetDate(m.SourceObject.ReferenceDate)
		
	ENDPROC

	PROCEDURE pickhour
		LOCAL ARRAY EventInfo(1)
		LOCAL SourceObject AS Shape
		
		AEVENTS(m.EventInfo, 0)
		m.SourceObject = m.EventInfo(1)
		
		* set the hour
		WITH Thisform.pgfViews.pagHours.spnHour
			.Value = VAL(m.SourceObject.Caption)
			.InteractiveChange()
		ENDWITH
		
	ENDPROC

	PROCEDURE pickminute
		LOCAL ARRAY EventInfo(1)
		LOCAL SourceObject AS Shape
		
		AEVENTS(m.EventInfo, 0)
		m.SourceObject = m.EventInfo(1)
		
		* set the minutes
		WITH Thisform.pgfViews.pagHours.spnMinute
			.Value = VAL(m.SourceObject.Caption)
			.InteractiveChange()
		ENDWITH
		
	ENDPROC

	PROCEDURE pickmonth
		LOCAL ARRAY EventInfo(1)
		LOCAL SourceObject AS Shape
		
		AEVENTS(m.EventInfo, 0)
		m.SourceObject = m.EventInfo(1)
		
		Thisform.ReferenceDate = m.SourceObject.ReferenceDate
		
		* when the user picks a month, the date picker displays the picked month days
		This.PopulateDays()
		This.pgfViews.ActivePage = This.pgfViews.pagDays.PageOrder
		
	ENDPROC

	PROCEDURE pickyear
		LOCAL ARRAY EventInfo(1)
		LOCAL SourceObject AS Shape
		
		AEVENTS(m.EventInfo, 0)
		m.SourceObject = m.EventInfo(1)
		
		Thisform.ReferenceDate = m.SourceObject.ReferenceDate
		
		* when the user picks a year, the date picker displays the picked year months
		This.PopulateMonths()
		This.pgfViews.ActivePage = This.pgfViews.pagMonths.PageOrder
		
	ENDPROC

	PROCEDURE populatecenturies		&& Populate the century centered editor.
		LOCAL ReferenceYear AS Integer
		
		* the reference year will be the year for the calendrical system
		IF This.CalendarIndex = 0
			m.ReferenceYear = YEAR(This.ReferenceDate)
		ELSE
			WITH This.Calendars(This.CalendarIndex) AS CalendarCalc
				.FromSystem(This.ReferenceDate)
				m.ReferenceYear = .Year
			ENDWITH
		ENDIF
		
		* set the popups values
		WITH This.pgfViews.pagCenturies
		
			.lstCentury.Value = TRANSFORM(INT(m.ReferenceYear / 100), "@L 99")
			.lstYear.Value = TRANSFORM(m.ReferenceYear % 100, "@L 99")
		
		ENDWITH
		
		This.lblContext.Caption = TRANSFORM(INT(m.ReferenceYear / 100), "@L 99") + "..."
	ENDPROC

	PROCEDURE populatedays
		LPARAMETERS Orientation AS Integer
		
		LOCAL FirstDay AS Date, FirstDow AS Integer
		LOCAL DayIndex AS Date, RowIndex AS Integer, ColIndex AS Integer
		LOCAL LblReference AS Label, ShpReference AS Shape, BaseReference AS Shape
		LOCAL ReferenceMonth AS Integer, ReferenceYear AS Integer
		LOCAL MonthName AS String
		LOCAL Today AS Logical
		LOCAL EventsYear AS Integer
		LOCAL DayEvents AS Collection
		LOCAL DayEventID AS String
		LOCAL EventsDescription AS String
		LOCAL WDayReference AS Label
		
		* orientation will be > 1 moving forward, or < 0 moving backward
		IF PCOUNT() = 0
			m.Orientation = 1
		ENDIF
		
		* for a system calendar, use builtin functions to set the start of the month
		IF This.CalendarIndex = 0
			m.ReferenceMonth = MONTH(This.ReferenceDate)
			m.FirstDay = DATE(YEAR(This.ReferenceDate), m.ReferenceMonth, 1)
			m.DayEvents = .NULL.
		ELSE
			* for other calendrical systems, get the corresponding year, and month, and then get the system date
			WITH This.Calendars(This.CalendarIndex) AS CalendarCalc
				.FromSystem(This.ReferenceDate)
				m.ReferenceMonth = .Month
				m.ReferenceYear = .Year
				.SetDate(m.ReferenceYear, m.ReferenceMonth, 1)
				m.EventsYear = -1
				m.FirstDay = .ToSystem()
			ENDWITH
		ENDIF
		
		* the first day will be on a Monday: adjust, if needed
		m.FirstDow = DOW(m.FirstDay, 2)
		m.DayIndex = m.FirstDay - (m.FirstDow - 1)
		
		IF This.CalendarIndex != 0
			WITH This.Calendars(This.CalendarIndex) AS CalendarCalc
				.DaysAdd(-(m.FirstDow - 1))
			ENDWITH
		ENDIF
		
		* if going backwards, and the first day os the month is already a Monday, arrange an extra week at the first row
		IF m.Orientation < 0 AND m.DayIndex = m.FirstDay
			m.DayIndex = m.DayIndex - 7
			IF This.CalendarIndex != 0
				WITH This.Calendars(This.CalendarIndex) AS CalendarCalc
					.DaysAdd(-7)
				ENDWITH
			ENDIF
		ENDIF
		
		* avoid flickering...
		
		This.LockScreen = .T.
		
		WITH This.pgfViews.pagDays
		
			FOR m.RowIndex = 1 TO 6
		
				FOR m.ColIndex = 1 TO 7
		
					m.LblReference = EVALUATE(TEXTMERGE(".lblR<<m.RowIndex>>C<<m.ColIndex>>"))
					m.ShpReference = EVALUATE(TEXTMERGE(".shpR<<m.RowIndex>>C<<m.ColIndex>>"))
					m.BaseReference = EVALUATE(TEXTMERGE(".shpR<<m.RowIndex>>C<<m.ColIndex>>_base"))
		
					IF m.RowIndex = 1
						DO CASE
						CASE m.ColIndex = 1
							m.WDayReference = .lblMon
						CASE m.ColIndex = 2
							m.WDayReference = .lblTue
						CASE m.ColIndex = 3
							m.WDayReference = .lblWed
						CASE m.ColIndex = 4
							m.WDayReference = .lblThu
						CASE m.ColIndex = 5
							m.WDayReference = .lblFri
						CASE m.ColIndex = 6
							m.WDayReference = .lblSat
						OTHERWISE
							m.WDayReference = .lblSun
						ENDCASE
						m.WDayReference.Caption = ""
						m.WDayReference.Visible = .T.
						m.WDayReference.Caption = Thisform.IndexedString("INIT_WDAYS", m.ColIndex)
						m.WDayReference.Top = (m.ShpReference.Height - m.WDayReference.Height) / 2
						m.WDayReference.Left = m.ShpReference.Left + (m.ShpReference.Width - m.WDayReference.Width) / 2
					ENDIF
		
					m.ShpReference.ToolTipText = ""
					* this is what will be picked, if the user chooses the tile
					m.ShpReference.ReferenceDate = m.DayIndex
					IF m.DayIndex != This.SelectedDate
						m.ShpReference.BorderColor = This.DateBorderColor
						m.ShpReference.BorderStyle = 0
					ELSE
						m.ShpReference.BorderColor = This.SelectedDateBorderColor
						m.ShpReference.BorderStyle = 1
					ENDIF
		
					* display the day number
					m.LblReference.Visible = .T.
					IF This.CalendarIndex = 0
						m.LblReference.Caption = LTRIM(STR(DAY(m.DayIndex), 2, 0))
						m.LblReference.Enabled = MONTH(m.DayIndex) = m.ReferenceMonth
					ELSE
						* for calendrical systems
						WITH This.Calendars(This.CalendarIndex) AS CalendarCalc
							m.LblReference.Caption = LTRIM(STR(.Day, 2, 0))
							m.LblReference.Enabled = .Month = m.ReferenceMonth
							* if events not set, or not set for the year
							IF m.EventsYear != .Year
								* set them
								.SetEvents()
								m.EventsYear = .Year
							ENDIF
							* get the events for the day
							m.DayEvents = .DayEvents()
							.DaysAdd(1)
						ENDWITH
					ENDIF
		
					* is it "today"?
					m.Today = m.DayIndex = DATE()
					m.LblReference.FontBold = m.Today
					m.BaseReference.Visible = m.Today OR (!ISNULL(m.DayEvents) AND m.DayEvents.Count > 0)
					* today has a special color
					IF m.Today
						m.BaseReference.BackColor = This.TodayBackColor
					ENDIF
					* if there are events for the day, display them as a tooltip
					IF !ISNULL(m.DayEvents) AND m.DayEvents.Count > 0
						m.EventsDescription = ""
						FOR EACH m.DayEventID IN m.DayEvents
							m.EventsDescription = m.EventsDescription + ;
								This.Calendars(This.CalendarIndex).CalendarEvents(m.DayEventID).CommonName + CHR(13) + CHR(10)
						ENDFOR
						m.ShpReference.ToolTipText = RTRIM(m.EventsDescription, 0, CHR(13), CHR(10))
						* and set a special color for the tile
						IF !m.Today
							m.BaseReference.BackColor = This.EventBackColor
						ENDIF
					ENDIF
		
					* center the day number
					m.LblReference.Top = m.ShpReference.Top + (m.ShpReference.Height - m.LblReference.Height) / 2
					m.LblReference.Left = m.ShpReference.Left + (m.ShpReference.Width - m.LblReference.Width) / 2
		
					* and move forward
					m.DayIndex = m.DayIndex + 1
		
				ENDFOR
		
			ENDFOR
		
		ENDWITH
		
		* display the month, on top
		IF This.CalendarIndex = 0
			This.lblContext.Caption = This.IndexedString("MONTHS", MONTH(Thisform.ReferenceDate)) + ;
											" " + TRANSFORM(YEAR(Thisform.ReferenceDate))
		ELSE
			WITH This.Calendars(This.CalendarIndex) AS CalendarCalc
				This.lblContext.Caption = .MonthName(m.ReferenceMonth, m.ReferenceYear) + " " + TRANSFORM(m.ReferenceYear)
			ENDWITH
		ENDIF
		
		This.LockScreen = .F.
		* done
		
	ENDPROC

	PROCEDURE populatemonths
		LPARAMETERS Orientation AS Integer
		
		LOCAL FirstMonth AS Date
		LOCAL MonthIndex AS Date, RowIndex AS Integer, ColIndex AS Integer
		LOCAL LblReference AS Label, ShpReference AS Shape, BaseReference AS Shape
		LOCAL ReferenceYear AS Integer
		LOCAL ThisYear AS Integer, ThisMonth AS Integer
		LOCAL MonthName AS String
		LOCAL CurrentMonth AS Logical
		
		* orientation will be > 1 moving forward, or < 0 moving backward
		IF PCOUNT() = 0
			m.Orientation = 1
		ENDIF
		
		* for a system calendar, use builtin functions to set the start of the year
		IF This.CalendarIndex = 0
			m.ReferenceYear = YEAR(This.ReferenceDate)
			m.MonthIndex = DATE(m.ReferenceYear, 1, 1)
		
			IF m.Orientation < 0
				m.MonthIndex = Thisform.MoveDate(m.MonthIndex, -4)
			ENDIF
		
		ELSE
		
			* for other calendrical systems, get the corresponding year, and then get the system date
			WITH This.Calendars(This.CalendarIndex) AS CalendarCalc
		
				.FromSystem()
				m.ThisYear = .Year
				m.ThisMonth = .Month
				
				.FromSystem(This.ReferenceDate)
				m.ReferenceYear = .Year
				.SetDate(m.ReferenceYear, 1, 1)
		
				IF m.Orientation < 0
					.MonthsAdd(-4)
				ENDIF
		
				m.MonthIndex = .ToSystem()
			ENDWITH
		
		ENDIF
		
		This.LockScreen = .T.
		
		WITH This.pgfViews.pagMonths
		
			FOR m.RowIndex = 1 TO 4
		
				FOR m.ColIndex = 1 TO 4
		
					m.LblReference = EVALUATE(TEXTMERGE(".lblR<<m.RowIndex>>C<<m.ColIndex>>"))
					m.ShpReference = EVALUATE(TEXTMERGE(".shpR<<m.RowIndex>>C<<m.ColIndex>>"))
					m.BaseReference = EVALUATE(TEXTMERGE(".shpR<<m.RowIndex>>C<<m.ColIndex>>_base"))
		
					* this is what will be picked, if the user chooses the tile (and move to select the day)
					m.ShpReference.ReferenceDate = m.MonthIndex
		
					* if the month of the tile is the current month (the month of today), signal with the back color for today
					m.LblReference.Visible = .T.
					* make that verification using the built-in functions
					IF This.CalendarIndex = 0
						m.LblReference.Caption = This.IndexedString("SHORT_MONTHS", MONTH(m.MonthIndex))
						m.LblReference.Enabled = YEAR(m.MonthIndex) = m.ReferenceYear
						m.CurrentMonth = (MONTH(m.MonthIndex) = MONTH(DATE()) AND YEAR(m.MonthIndex) = YEAR(DATE()))
						m.MonthIndex = This.MoveDate(m.MonthIndex, 1)
					ELSE
						* or the calendar class methods
						WITH This.Calendars(This.CalendarIndex) AS CalendarCalc
							m.LblReference.Caption = .MonthName(.Month, .Year, .T.)
							m.LblReference.Enabled = .Year = m.ReferenceYear
							m.CurrentMonth = (.Month = m.ThisMonth) AND (.Year = m.ThisYear)
							.MonthsAdd(1)
							m.MonthIndex = .ToSystem()
						ENDWITH
					ENDIF
		
					m.LblReference.FontBold = m.CurrentMonth
					m.BaseReference.Visible = m.CurrentMonth
		
					m.LblReference.Top = m.ShpReference.Top + (m.ShpReference.Height - m.LblReference.Height) / 2
					m.LblReference.Left = m.ShpReference.Left + (m.ShpReference.Width - m.LblReference.Width) / 2
		
				ENDFOR
		
			ENDFOR
		
		ENDWITH
		
		* tell the user in which year we are
		This.lblContext.Caption = TRANSFORM(m.ReferenceYear)
		
		This.LockScreen = .F.
		
	ENDPROC

	PROCEDURE populateyears
		LPARAMETERS Orientation AS Integer
		
		LOCAL FirstYear AS Date
		LOCAL YearIndex AS Date, RowIndex AS Integer, ColIndex AS Integer
		LOCAL LblReference AS Label, ShpReference AS Shape, BaseReference AS Shape
		LOCAL ThisYear AS Integer
		LOCAL ReferenceYear AS Integer
		LOCAL CurrentYear AS Logical
		
		* orientation will be > 1 moving forward, or < 0 moving backward
		IF PCOUNT() = 0
			m.Orientation = 1
		ENDIF
		
		* for the system calendar, use built-in functions to determine the start of the decade
		IF This.CalendarIndex = 0
		
			m.ThisYear = YEAR(DATE())
			m.ReferenceYear = YEAR(This.ReferenceDate)
			m.YearIndex = DATE(m.ReferenceYear - m.ReferenceYear % 10, 1, 1)
		
			IF m.Orientation < 0
				m.YearIndex = This.MoveDate(m.YearIndex, -24)
			ENDIF
		ELSE
			* otherwise, use the calendar class methods to translate the dates back and forth, between system and class
			WITH This.Calendars(This.CalendarIndex) AS CalendarCalc
				.FromSystem()
				m.ThisYear = .Year
				.FromSystem(This.ReferenceDate)
				m.ReferenceYear = .Year
				.SetDate(.Year - .Year % 10, 1, 1)
				IF m.Orientation < 0
					.MonthsAdd(-24)
				ENDIF
				m.YearIndex = .ToSystem()
			ENDWITH
		ENDIF
		
		This.LockScreen = .T.
		
		WITH This.pgfViews.pagYears
		
			FOR m.RowIndex = 1 TO 4
		
				FOR m.ColIndex = 1 TO 4
		
					m.LblReference = EVALUATE(TEXTMERGE(".lblR<<m.RowIndex>>C<<m.ColIndex>>"))
					m.ShpReference = EVALUATE(TEXTMERGE(".shpR<<m.RowIndex>>C<<m.ColIndex>>"))
					m.BaseReference = EVALUATE(TEXTMERGE(".shpR<<m.RowIndex>>C<<m.ColIndex>>_base"))
		
					* sets the date that will be picked, and allow the user to select the month afterward
					m.ShpReference.ReferenceDate = m.YearIndex
		
					* determine if the year is the year of today
					m.LblReference.Visible = .T.
					IF This.CalendarIndex = 0
						m.LblReference.Caption = TRANSFORM(YEAR(m.YearIndex))
						m.LblReference.Enabled = INT(YEAR(m.YearIndex) / 10) = INT(YEAR(This.ReferenceDate) / 10)
						m.CurrentYear = (YEAR(m.YearIndex) = YEAR(DATE()))
						m.YearIndex = Thisform.MoveDate(m.YearIndex, 12)
					ELSE
						WITH This.Calendars(This.CalendarIndex) AS CalendarCalc
							m.LblReference.Caption = TRANSFORM(.Year)
							m.LblReference.Enabled = INT(.Year / 10) = INT(m.ReferenceYear / 10)
							m.CurrentYear = .Year = m.ThisYear
							.MonthsAdd(12)
							m.YearIndex = .ToSystem()
						ENDWITH
					ENDIF
		
					* if so, use the today color to fill the tile
					m.LblReference.FontBold = m.CurrentYear
					m.BaseReference.Visible = m.CurrentYear
		
					m.LblReference.Top = m.ShpReference.Top + (m.ShpReference.Height - m.LblReference.Height) / 2
					m.LblReference.Left = m.ShpReference.Left + (m.ShpReference.Width - m.LblReference.Width) / 2
		
				ENDFOR
		
			ENDFOR
		
		ENDWITH
		
		* tell the user the decade we're in
		This.lblContext.Caption = TRANSFORM(m.ReferenceYear - m.ReferenceYear % 10) + "-" + ;
											TRANSFORM(m.ReferenceYear - m.ReferenceYear % 10 + 9)
		This.LockScreen = .F.
		
	ENDPROC

	PROCEDURE referencedate_assign
		LPARAMETERS NewVal
		
		* try to set the reference date, if it falls in the admissible years period
		DO CASE
		CASE BETWEEN(YEAR(m.NewVal), This.MinYear, This.MaxYear)
			This.ReferenceDate = m.NewVal
		CASE YEAR(m.NewVal) < This.MinYear
			TRY
				This.ReferenceDate = DATE(This.MinYear, MONTH(m.NewVal), DAY(m.NewVal))
			CATCH
				TRY
					This.ReferenceDate = DATE(This.MinYear, 1, 1)	
				CATCH
				ENDTRY
			ENDTRY
		OTHERWISE
			TRY
				This.ReferenceDate = DATE(This.MaxYear, MONTH(m.NewVal), DAY(m.NewVal))
			CATCH
			ENDTRY
		ENDCASE
		
	ENDPROC

	PROCEDURE selectday
		LOCAL ARRAY EventInfo(1)
		LOCAL SourceObject AS Shape
		
		AEVENTS(m.EventInfo, 0)
		m.SourceObject = m.EventInfo(1)
		
		This.SelectedDate = m.SourceObject.ReferenceDate
		IF This.IsDatetime
			This.SelectedTime = DTOT(This.SelectedDate) + IIF(EMPTY(This.SelectedTime), 0, This.SelectedTime - DTOT(TTOD(This.SelectedTime)))
		ENDIF
		
		m.SourceObject.Parent.SetAll("BorderStyle", 0, "Shape")
		m.SourceObject.Parent.SetAll("BorderColor", This.DateBorderColor, "Shape")
		m.SourceObject.BorderStyle = 1
		m.SourceObject.BorderColor = This.SelectedDateBorderColor
		
	ENDPROC

	PROCEDURE selecteddate_assign
		LPARAMETERS NewVal
		
		This.SelectedDate = m.NewVal
		
		IF !ISNULL(m.NewVal)
			* display using built-in transform, for a system calendar
			IF This.CalendarIndex = 0
				This.lblSelected.Caption = TRANSFORM(m.NewVal, "@YL")
			ELSE
				* or use a display template, for calendar classes 
				WITH This.Calendars(This.CalendarIndex) AS CalendarCalc
					.FromSystem(m.NewVal)
					This.lblSelected.Caption = TEXTMERGE("<<.WeekdayName()>>, <<.Day>> <<.MonthName()>> <<.Year>>")
				ENDWITH
			ENDIF
		ENDIF
		
	ENDPROC

	PROCEDURE selectedtime_assign
		LPARAMETERS NewVal
		LOCAL Roll AS String
		LOCAL RollPosition AS Integer
		LOCAL RollPrevious AS Integer
		LOCAL RollItems AS String
		LOCAL RollInterval AS Integer
		LOCAL RollCurrent AS Number
		
		THIS.SelectedTime = m.NewVal
		
		* display according to current settings
		This.lblSelectedTime.Caption = TTOC(m.NewVal, 2)
		
		* set the corresponding hours, minutes, seconds, and meridian (if required) of the time selector
		WITH This.pgfViews.pagHours
		
			IF .opgMeridian.Visible
				IF HOUR(m.NewVal) >= 12
					.opgMeridian.Value = 2
					.spnHour.Value = EVL(HOUR(m.NewVal) - 12, 12)
				ELSE
					.opgMeridian.Value = 1
					.spnHour.Value = EVL(HOUR(m.NewVal), 12)
				ENDIF
		
			ELSE
		
				.spnHour.Value = HOUR(m.NewVal)
		
				m.RollItems = "0003060912151821"
				m.RollInterval = 3 
				m.Roll = REPLICATE(m.RollItems, 3)
		
				m.RollCurrent = .spnHour.Value / m.RollInterval
				m.RollPosition = (INT(m.RollCurrent) * 2) + LEN(m.RollItems) + 1
				IF m.RollCurrent = INT(m.RollCurrent)
					m.RollPrevious = m.RollPosition - 2
				ELSE
					m.RollPrevious = m.RollPosition
				ENDIF
				.lblHouP1.Caption = SUBSTR(m.Roll, m.RollPrevious, 2)
				.lblHouP2.Caption = SUBSTR(m.Roll, m.RollPrevious - 2, 2)
				.lblHouP3.Caption = SUBSTR(m.Roll, m.RollPrevious - 4, 2)
				.lblHouN1.Caption = SUBSTR(m.Roll, m.RollPosition + 2, 2)
				.lblHouN2.Caption = SUBSTR(m.Roll, m.RollPosition + 4, 2)
				.lblHouN3.Caption = SUBSTR(m.Roll, m.RollPosition + 6, 2)
		
			ENDIF
		
			.spnMinute.Value = MINUTE(m.NewVal)
		
			m.RollItems = "00153045"
			m.RollInterval = 15
			m.Roll = REPLICATE(m.RollItems, 3)
		
			m.RollCurrent = .spnMinute.Value / m.RollInterval
			m.RollPosition = (INT(m.RollCurrent) * 2) + 9
			IF m.RollCurrent = INT(m.RollCurrent)
				m.RollPrevious = m.RollPosition - 2
			ELSE
				m.RollPrevious = m.RollPosition
			ENDIF
			.lblMinP1.Caption = SUBSTR(m.Roll, m.RollPrevious, 2)
			.lblMinP2.Caption = SUBSTR(m.Roll, m.RollPrevious - 2, 2)
			.lblMinP3.Caption = SUBSTR(m.Roll, m.RollPrevious - 4, 2)
			.lblMinN1.Caption = SUBSTR(m.Roll, m.RollPosition + 2, 2)
			.lblMinN2.Caption = SUBSTR(m.Roll, m.RollPosition + 4, 2)
			.lblMinN3.Caption = SUBSTR(m.Roll, m.RollPosition + 6, 2)
		
			.spnSecond.Value = SEC(m.NewVal)
		
		ENDWITH
		
	ENDPROC

	PROCEDURE setdate		&& Sets the date and closes the date picker.
		LPARAMETERS PickedDate AS Date
		LOCAL Result AS DateOrDatetime
		
		IF This.UseLastSelectedDate AND TYPE("_Screen._dp_LastSelectedDate") == "D"
			_Screen._dp_LastSelectedDate = m.PickedDate
		ENDIF
		
		IF This.IsDatetime
			m.Result = DTOT(m.PickedDate) + (This.SelectedTime - DTOT(TTOD(This.SelectedTime)))
		ELSE
			m.Result = m.PickedDate
		ENDIF
		
		IF !ISNULL(This.TargetControl)
			This.TargetControl.Value = m.Result
			This.TargetControl.SetFocus()
		ELSE
			This.SelectedDate = m.Result
		ENDIF
		
		Thisform.Release()
		
	ENDPROC

	PROCEDURE Show
		LPARAMETERS nStyle
		LOCAL TargetForm AS Form
		LOCAL TargetHierarchy AS Object
		LOCAL InGrid AS Logical
		LOCAL TopX AS Integer
		LOCAL LeftX AS Integer
		LOCAL LoopIndex AS Integer
		LOCAL OverControl AS Logical
		
		* calculate the initial position of the form
		
		m.TargetForm = .NULL.
		m.InGrid = .F.
		
		STORE 0 TO m.TopX, m.LeftX
		
		* if there is a target control, traverse the hierarchy of its containers (page/page frames, columns/grids...)
		* in each step, top and left relative coordinates must be added to determine the final absolute coordinates
		IF !ISNULL(This.TargetControl)
			m.TargetHierarchy = This.TargetControl.Parent
			DO WHILE ISNULL(m.TargetForm) AND !ISNULL(m.TargetHierarchy)
				IF m.TargetHierarchy.BaseClass == "Form"
					m.TargetForm = m.TargetHierarchy
				ELSE
					DO CASE
					CASE m.TargetHierarchy.BaseClass == "Pageframe"
						m.TopX = m.TopX + (m.TargetHierarchy.Height - m.TargetHierarchy.PageHeight) - m.TargetHierarchy.BorderWidth
						m.LeftX = m.LeftX + m.TargetHierarchy.BorderWidth
					CASE m.TargetHierarchy.BaseClass == "Grid"
						m.TopX = m.TopX + m.TargetHierarchy.HeaderHeight + m.TargetHierarchy.RowHeight * (m.TargetHierarchy.RelativeRow - 1)
						IF m.TargetHierarchy.DeleteMark
							m.LeftX = m.LeftX + 8
						ENDIF
						IF m.TargetHierarchy.RecordMark
							m.LeftX = m.LeftX + 8
						ENDIF
						m.LeftX = m.LeftX + m.TargetHierarchy.GridLineWidth
						m.InGrid = .T.
					CASE m.TargetHierarchy.BaseClass == "Column"
						FOR m.LoopIndex = 1 TO m.TargetHierarchy.Parent.ColumnCount
							IF BETWEEN(m.TargetHierarchy.Parent.Columns(m.LoopIndex).ColumnOrder, ;
											m.TargetHierarchy.Parent.LeftColumn, ;
											m.TargetHierarchy.ColumnOrder - 1)
								m.LeftX = m.LeftX + m.TargetHierarchy.Parent.Columns(m.LoopIndex).Width + m.TargetHierarchy.Parent.GridLineWidth
							ENDIF
						ENDFOR
					ENDCASE
					IF PEMSTATUS(m.TargetHierarchy, "Top", 5)
						m.TopX = m.TopX + m.TargetHierarchy.Top
					ENDIF
					IF PEMSTATUS(m.TargetHierarchy, "Left", 5)
						m.LeftX = m.LeftX + m.TargetHierarchy.Left
					ENDIF
					m.TargetHierarchy = IIF(TYPE("m.TargetHierarchy.Parent") == "O", m.TargetHierarchy.Parent, .NULL.)
				ENDIF
			ENDDO
		ENDIF
		
		* if we found a form
		IF !ISNULL(m.TargetForm)
		
			* the form is not being placed over the target control
			m.OverControl = .F.
		
			* get the form positional coordinates, and add to get an absolute screen position
			IF m.TargetForm.ShowWindow = 0 AND !m.TargetForm.Desktop AND !(m.TargetForm = _Screen)
				m.TopX = m.TopX + m.TargetForm.Top + _Screen.Top
				m.LeftX = m.LeftX + m.TargetForm.Left + _Screen.Left
			ELSE
				m.TopX = m.TopX + m.TargetForm.Top
				m.LeftX = m.LeftX + m.TargetForm.Left
			ENDIF
			* including frame elements
			IF !m.InGrid AND !(m.TargetForm = _Screen)
				IF m.TargetForm.BorderStyle = 3
					m.TopX = m.TopX + SYSMETRIC(4)
					m.LeftX = m.LeftX + SYSMETRIC(3)
				ENDIF
		
				m.TopX = m.TopX + SYSMETRIC(9)
			ENDIF
		
			* use the target control positional coordinates to determine the date picker form position
			m.TopX = m.TopX + This.TargetControl.Top
			m.LeftX = m.LeftX + This.TargetControl.Left + This.TargetControl.Width
		
			* if the form does not fit to the right of the target control
			IF m.LeftX + This.Width > SYSMETRIC(21)
				* place it over the control
				m.LeftX = m.LeftX - This.TargetControl.Width
				* if even now it does not fit
				IF m.LeftX + This.Width > SYSMETRIC(21)
					* align its right edge to the the right edge of the target control
					m.LeftX = m.LeftX - This.Width + This.TargetControl.Width
				ENDIF
				* in any case, now it's being placed over the cursor
				m.OverControl = .T.
			ENDIF
		
			* if the form does not fit vertically
			IF m.TopX + This.Height > SYSMETRIC(22)
				* move it upwards
				m.TopX = m.TopX - This.Height
				* if it was over the control, move it a bit more
				IF m.OverControl
					m.TopX = m.TopX - This.TargetControl.Height
				ENDIF
			ELSE
				* but if it was already over the target control
				IF m.OverControl
					* move it downwards
					m.TopX = m.TopX + This.TargetControl.Height
					* unless it coudn't fit, so move it upwards
					IF m.TopX + This.Height > SYSMETRIC(22)
						m.TopX = m.TopX - (This.Height + This.TargetControl.Height)
					ENDIF
				ENDIF
			ENDIF
		
			* the form is finally placed
			This.Top = m.TopX
			This.Left = m.LeftX
		
		ENDIF
		
	ENDPROC

	PROCEDURE string		&& Returns a string from a predefined vocabulary.
		LPARAMETERS StringCode AS String
		
		DO CASE
		CASE m.StringCode == "MONTHS"
			RETURN ":1:january:2:february:3:march:4:april:5:may:6:june:7:july:8:august:9:september:10:october:11:november:12:december:"
		
		CASE m.StringCode == "SHORT_MONTHS"
			RETURN ":1:jan:2:feb:3:mar:4:apr:5:may:6:jun:7:jul:8:aug:9:sep:10:oct:11:nov:12:dec:"
		
		CASE m.StringCode == "INIT_WDAYS"
			RETURN ":1:Mon:2:Tue:3:Wed:4:Thu:5:Fri:6:Sat:7:Sun:"
		
		CASE m.StringCode == "MENU-1"
			RETURN "Pick date and return"
		
		CASE m.StringCode == "MENU-2"
			RETURN "Cancel"
		
		CASE m.StringCode == "MENU-4"
			RETURN "Time"
		
		CASE m.StringCode == "MENU-5"
			RETURN "Days in a month"
		
		CASE m.StringCode == "MENU-6"
			RETURN "Months in a year"
		
		CASE m.StringCode == "MENU-7"
			RETURN "Years in a decade"
		
		CASE m.StringCode == "MENU-8"
			RETURN "Year in a century"
		
		CASE m.StringCode == "MENU-10"
			RETURN "Today"
		
		CASE m.StringCode == "MENU-11"
			RETURN "Now"
		
		CASE m.StringCode == "MENU-13"
			RETURN "Switch calendar to"
		
		CASE m.StringCode == "MENU-13-1"
			RETURN "System"
		ENDCASE
		
		RETURN ""
		
		
	ENDPROC

	PROCEDURE Unload
		IF This.ReleaseType < 1
			RETURN This.SelectedDate
		ELSE
			RETURN .NULL.
		ENDIF
		
	ENDPROC

	PROCEDURE btnMenu.Click
		* let the user select an option
		ACTIVATE POPUP (Thisform.MenuName) AT 2, 0
		
	ENDPROC

	PROCEDURE btnMenu.Init
		LOCAL Source AS String
		
		TEXT TO m.Source NOSHOW FLAGS 1
		iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAAABmJLR0QA/wD/AP+
		gvaeTAAAAS0lEQVRYCWNgGAWjITAaAgMcAoxY7P+PRYyaQih2MlHT5FGzRkNgNA
		TICQGUPAk1YLQcgAbEKDUaAiMkBEbLgRES0aPeHA2BwRwCANGKAwrZZHSTAAAAA
		ElFTkSuQmCC
		ENDTEXT
		
		This.PictureVal = STRCONV(m.Source, 14)
		
	ENDPROC

	PROCEDURE btnNext.Click
		* move forward (one month, one year, a decade)
		DO CASE
		
		CASE Thisform.pgfViews.ActivePage = Thisform.pgfViews.pagDays.PageOrder
			Thisform.ReferenceDate = Thisform.MoveDate(Thisform.ReferenceDate, 1)
			Thisform.PopulateDays()
		
		CASE Thisform.pgfViews.ActivePage = Thisform.pgfViews.pagMonths.PageOrder
			Thisform.ReferenceDate = Thisform.MoveDate(Thisform.ReferenceDate, 12)
			Thisform.PopulateMonths()
		
		CASE Thisform.pgfViews.ActivePage = Thisform.pgfViews.pagYears.PageOrder
			Thisform.ReferenceDate = Thisform.MoveDate(Thisform.ReferenceDate, 120)
			Thisform.PopulateYears()
		
		ENDCASE
		
	ENDPROC

	PROCEDURE btnNext.DblClick
		This.Click()
	ENDPROC

	PROCEDURE btnNext.Init
		LOCAL Source AS String
		
		TEXT TO m.Source NOSHOW FLAGS 1
		iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAAA
		BmJLR0QA/wD/AP+gvaeTAAAAuUlEQVRYCe2WvQqDMBSFL4rt
		G/Q5HHTo2MXnbP0ZHYQ+UkcXKaVTab87OLoI5oZ65XxJIIRz
		chMhIv7tvQLpigJUrDnBA4KrwPENE5whuBIcryLyhRdcILg0
		xA1X0xB6d6IIUcdQicZDUIEUWjC/mFGE6KwrcSDAAHocE30J
		i0oWZ9ZPfFj6hFkaaB5v3mc49KC7H+lzCCY397Lv58Id+a/u
		YHLmpuZsWgoa00cp/lLRmLyI8XX9YQV+VAA+Na0vzqgAAAAA
		SUVORK5CYII=C
		ENDTEXT
		
		This.PictureVal = STRCONV(m.Source, 14)
		
	ENDPROC

	PROCEDURE btnNow.Click
		LOCAL Now AS Datetime
		
		* select now!
		m.Now = DATETIME()
		
		Thisform.SelectedTime = m.Now
		* isolate the date part
		STORE TTOD(m.Now) TO Thisform.ReferenceDate, Thisform.SelectedDate
		
		* mark where were we
		IF Thisform.pgfViews.ActivePage != Thisform.pgfViews.pagHours.PageOrder
			Thisform.PreviousPage = Thisform.pgfViews.ActivePage
		ENDIF
		
		* and proceed to pick the hours
		Thisform.pgfViews.ActivePage = Thisform.pgfViews.pagHours.PageOrder
		
	ENDPROC

	PROCEDURE btnNow.DblClick
		LOCAL Now AS Datetime
		
		* by double-clicking on the Now button, the date and time is set to be picked
		m.Now = DATETIME()
		
		Thisform.SelectedTime = m.Now
		
		Thisform.SetDate(TTOD(m.Now))
		
	ENDPROC

	PROCEDURE btnNow.Init
		LOCAL Source AS String
		
		TEXT TO m.Source NOSHOW FLAGS 1
		iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAAAB
		mJLR0QA/wD/AP+gvaeTAAACKklEQVRYCe2WzWoTUQCFr7pxoy
		AqtEpJKBXBnb6FIibtA+hahdriS/gCgrhwoyJWsFZc6JsUoUU
		EpdBNbYtWazN+X5yRDMxvZ3YmnC/nTu65JzM306QhjB//+w4c
		qbkBk+RnoQdTcBbUJk+fYQWWYQNa1QxtS3AAUQlmzLqGaHPNU
		bELvvEP/CnMwjScinFs7hnHe2B2B+9DIy2yegAWelUdxmXqhh
		BeQQTuxj38UOqxyoJ9fB6y5JtI1twCL/4GO67jtXSe9DZYfhf
		Pk/OSN++JO79FwBsYq6YnxFz4HC+SGSnKvGTSzGO8kjqk3Dpv
		pm4ofkRMC5Yrb9CfzNo5had0NHX098DP/hjDZfgUmj/WqVgBO
		2/gKWWdwNU48Sb2Nizpulal7CMht3UGL5M5KctdJGBuFS9Vcv
		efKE2GYGkeo8tPcmDuG55S1keQ/D4MUslmB765DUm34yFZJ/B
		1OBOC3wXxMNcszGN0UdL1ZfRFx1knsO4EXIa2dCUuWov9n2Wd
		wLt4th97G5Z0Jd2FnW7XPgm/PKbxprpAwa+YSbySHpHyxnmNN
		5H3x1sK7HqIV9Y5ktvgwkX8sLrPQju28AmopR7pA/DjmMfrao
		EFfv/bUfvnmLVDefUDRl7FEt6BMnVDS/+Q0DPUHM+7EIH/kr3
		Ab8IlOB7j+BZj5/bwCHagD63oDC0PwBOwvIjv5MyexluXf0Z3
		aP0Aa+DViuP3HN+GCRhrvAOVd+APzUeNtPKVnw8AAAAASUVOR
		K5CYII=
		ENDTEXT
		
		This.PictureVal = STRCONV(m.Source, 14)
		
	ENDPROC

	PROCEDURE btnPrevious.Click
		* move backward (one month, one year, a decade)
		DO CASE
		
		CASE Thisform.pgfViews.ActivePage = Thisform.pgfViews.pagDays.PageOrder
			Thisform.ReferenceDate = Thisform.MoveDate(Thisform.ReferenceDate, -1)
			Thisform.PopulateDays(-1)
		
		CASE Thisform.pgfViews.ActivePage = Thisform.pgfViews.pagMonths.PageOrder
			Thisform.ReferenceDate = Thisform.MoveDate(Thisform.ReferenceDate, -12)
			Thisform.PopulateMonths(-1)
		
		CASE Thisform.pgfViews.ActivePage = Thisform.pgfViews.pagYears.PageOrder
			Thisform.ReferenceDate = Thisform.MoveDate(Thisform.ReferenceDate, -120)
			Thisform.PopulateYears(-1)
		
		ENDCASE
		
	ENDPROC

	PROCEDURE btnPrevious.DblClick
		This.Click()
		
	ENDPROC

	PROCEDURE btnPrevious.Init
		LOCAL Source AS String
		
		TEXT TO m.Source NOSHOW FLAGS 1
		iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAAA
		BmJLR0QA/wD/AP+gvaeTAAAAuklEQVRYCe2WsQrCMBCGj4T6
		PqIdXAN9T2sddfC9upQiTqLfDUK2LuWS4pX/o6GUfJdrCBXx
		yzuwXgdOTNVBkah8wvyCI5gmYXvCB84iEsAsCVMV8p5CApgl
		Yfqt/MI4glkSpirkA4VEMEu+8gFrBLPk8ivW/5G3rFZPOD1k
		Hox3sGrCwmy5cObdN5hnj3EE7cKNewPmqa6IOy0o3gkvYuQz
		6Mb0Tngn2AqS/5Qe9EEJtIiuhNid2+7AF9e1PWecSk2UAAAA
		AElFTkSuQmCC
		ENDTEXT
		
		This.PictureVal = STRCONV(m.Source, 14)
		
	ENDPROC

	PROCEDURE btnSet.Click
		* done, the user picked the selected date
		Thisform.SetDate(Thisform.SelectedDate)
		
	ENDPROC

	PROCEDURE btnSet.Init
		LOCAL Source AS String
		
		TEXT TO m.Source NOSHOW FLAGS 1
		iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAAABmJLR0QA
		/wD/AP+gvaeTAAAA5klEQVRYCe2USw7CMAxEcwRWAQkWPR4S3JQtdFEW
		HKW8B4pEV/2oBCG5Gqt2FHvcaeKU4gkFQoG6CmyhO2I/geRXmHvshFXF
		HrYOk/zCe4NVQ5CH7HHgZl03p1SelfHe7JBpcT1wDpuMPxtnMkoBCxJO
		wo5dLVZyM/4ieFicUhZyajlAxgod2HDHzDHXGoTLYQELWXCsidXJS9tT
		mvga+ZQmmpTSA+sx1bJh3PVhYQkk8nf41U2qRA7PC94Gr5VNtKxo+q5l
		4ir4VEJyVXGtCnkhUYkbQdUvh28AB46NDBYjCAX+XoEnkftJN5BlUDsA
		AAAASUVORK5CYII=
		ENDTEXT
		
		This.PictureVal = STRCONV(m.Source, 14)
		
	ENDPROC

	PROCEDURE btnToday.Click
		* select today!
		STORE DATE() TO Thisform.ReferenceDate, Thisform.SelectedDate
		
		Thisform.PopulateDays()
		Thisform.pgfViews.ActivePage = Thisform.pgfViews.pagDays.PageOrder
		
	ENDPROC

	PROCEDURE btnToday.DblClick
		LOCAL Now AS Datetime
		
		* this is one of the forms to pick a date(time): double click on today button
		m.Now = DATETIME()
		
		IF Thisform.IsDatetime
			Thisform.SelectedTime = m.Now
		ENDIF
		
		Thisform.SetDate(TTOD(m.Now))
		
	ENDPROC

	PROCEDURE btnToday.Init
		LOCAL Source AS String
		
		TEXT TO m.Source NOSHOW FLAGS 1
		iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr
		0AAAABmJLR0QA/wD/AP+gvaeTAAABM0lEQVRYCe2WTQ
		rCQAyFq3gAV1XwgoLe1K124WX0fUJgmDGTkYqlUskjf
		y+TNFOKXbf8lg3MZAMPzQmkmgQuCMkrh9FU7NTWwkW/
		dY39i9wmaGIT20bMD8q6nG9+URcNYAWtjT/mRwO4k1u
		nsXo278DYB3U3OfkGvj3ATqs6CqOFlYFPDqL5TQXUna
		RTIQbSWNWGDKqkJHmQfReouUhvhVSIgzRWtSGDdyRW3
		CeJvexBgH+V7oVcyIE87vqQQU44K0CcVbPyluYqeX0Z
		qcNuAmSQk2nKU5IblATYxHr5nsABXr6IQwZFQgHul3s
		mD7CJKeUKPOAS8gRkkMfNZxNcQ/TkxucsYH6oIYMakf
		tnkBrHcpwFzA81ZBASGwmcBQr6t7+ERYMoMPkAy/+B6
		IqW/P9v4AnSYUhbboaN7wAAAABJRU5ErkJggg==
		ENDTEXT
		
		This.PictureVal = STRCONV(m.Source, 14)
		
	ENDPROC

	PROCEDURE lblContext.Click
		* depending on the context, move to another layer
		DO CASE
		
		* from days in a month or a specific year to months in a year
		CASE INLIST(Thisform.pgfViews.ActivePage, Thisform.pgfViews.pagDays.PageOrder, Thisform.pgfViews.pagCenturies.PageOrder)
			Thisform.PopulateMonths()
			Thisform.pgfViews.ActivePage = Thisform.pgfViews.pagMonths.PageOrder
		
		* from months in a year to years in a decade
		CASE Thisform.pgfViews.ActivePage = Thisform.pgfViews.pagMonths.PageOrder
			Thisform.PopulateYears()
			Thisform.pgfViews.ActivePage = Thisform.pgfViews.pagYears.PageOrder
		
		* from time selector to whatever was being displayed before
		CASE Thisform.pgfViews.ActivePage = Thisform.pgfViews.pagHours.PageOrder
			Thisform.pgfViews.ActivePage = Thisform.PreviousPage
		
		* from years in a decade to a specific year of a century
		CASE Thisform.pgfViews.ActivePage = Thisform.pgfViews.pagYears.PageOrder
			Thisform.PopulateCenturies()
			Thisform.pgfViews.ActivePage = Thisform.pgfViews.pagCenturies.PageOrder
		
		ENDCASE
		
	ENDPROC

	PROCEDURE lblSelected.Click
		* show the currently selected day in its month
		Thisform.ReferenceDate = Thisform.SelectedDate
		
		Thisform.PopulateDays()
		Thisform.pgfViews.ActivePage = Thisform.pgfViews.pagDays.PageOrder
		
	ENDPROC

	PROCEDURE lblSelectedTime.Click
		IF Thisform.pgfViews.ActivePage != Thisform.pgfViews.pagHours.PageOrder
			Thisform.PreviousPage = Thisform.pgfViews.ActivePage
		ENDIF
		
		Thisform.pgfViews.ActivePage = Thisform.pgfViews.pagHours.PageOrder
		
	ENDPROC

	PROCEDURE pgfViews.pagCenturies.lstCentury.Init
		LOCAL CenturyOfDate AS Integer
		
		* build the centuries list
		* either for the system calendar
		IF Thisform.CalendarIndex = 0
			Thisform.ResetToDefault("MinYear")
			Thisform.ResetToDefault("MaxYear")
		ELSE
			* or for a calendar class
			WITH Thisform.Calendars(Thisform.CalendarIndex) AS CalendarCalc
				Thisform.MinYear = .MinYear
				Thisform.MaxYear = NVL(.MaxYear, 9999)
			ENDWITH
		ENDIF
		
		This.Clear()
		
		FOR m.CenturyOfDate = INT(Thisform.MinYear / 100) TO INT(Thisform.MaxYear / 100)
			This.AddItem(TRANSFORM(m.CenturyOfDate, "@L 99"))
		ENDFOR
		
		* this method may be called again when user switches calendars
	ENDPROC

	PROCEDURE pgfViews.pagCenturies.lstCentury.InteractiveChange
		LOCAL Base AS Date
		
		m.Base = Thisform.ReferenceDate
		
		* try to set the years (century + sub-century years), if allowed
		TRY
			IF Thisform.CalendarIndex = 0
				Thisform.ReferenceDate = DATE(VAL(This.Value) * 100 + VAL(This.Parent.lstYear.Value), ;
														MONTH(m.Base), DAY(m.Base))
			ELSE
				WITH Thisform.Calendars(Thisform.CalendarIndex) AS CalendarCalc
					.FromSystem(m.Base)
					IF .Validate(VAL(This.Value) * 100 + VAL(This.Parent.lstYear.Value), .Month, .Day)
						.SetDate(VAL(This.Value) * 100 + VAL(This.Parent.lstYear.Value), .Month, .Day)
						Thisform.ReferenceDate = .ToSystem()
					ENDIF
				ENDWITH
			ENDIF
			Thisform.lblContext.Caption = This.Value + "..."
		CATCH
			* an error repopulates the selectors
			Thisform.PopulateCenturies()
		ENDTRY
		
	ENDPROC

	PROCEDURE pgfViews.pagCenturies.lstYear.Init
		LOCAL YearOfCentury AS Integer
		
		FOR m.YearOfCentury = 0 TO 99
			This.AddItem(TRANSFORM(m.YearOfCentury, "@L 99"))
		ENDFOR
		
	ENDPROC

	PROCEDURE pgfViews.pagCenturies.lstYear.InteractiveChange
		LOCAL Base AS Date
		
		m.Base = Thisform.ReferenceDate
		
		* try to set the years (century + sub-century years), if allowed
		TRY
			IF Thisform.CalendarIndex = 0
				Thisform.ReferenceDate = DATE(VAL(This.Parent.lstCentury.Value) * 100 + VAL(This.Value), ;
														MONTH(m.Base), DAY(m.Base))
			ELSE
				WITH Thisform.Calendars(Thisform.CalendarIndex) AS CalendarCalc
					.FromSystem(m.Base)
					IF .Validate(VAL(This.Parent.lstCentury.Value) * 100 + VAL(This.Value), .Month, .Day)
						.SetDate(VAL(This.Parent.lstCentury.Value) * 100 + VAL(This.Value), .Month, .Day)
						Thisform.ReferenceDate = .ToSystem()
					ENDIF
				ENDWITH
			ENDIF
		CATCH
			* an error repopulates the selectors
			Thisform.PopulateCenturies()
		ENDTRY
		
	ENDPROC

	PROCEDURE pgfViews.pagDays.Init
		LOCAL ObjName AS String, ObjReference AS Object, BaseReference AS Shape, RowIndex AS Integer, ColIndex AS Integer
		
		* build a matrix of 6 x 7 tiles to display days of a month plus the name of the days of the week
		* each tile has 3 layers:
		* - the base shape, to be filled with TodayBackColor or EventBackColor
		* - the label, where the day (number) is put
		* - the control shape, that receives the user input and is marked as being hovered on or selected
		* the control shape holds its respective reference date, as a property
		* these tiles are setup in the begining, and then populated as the user interacts
		WITH This
		
			FOR m.RowIndex = 1 TO 6
				FOR m.ColIndex = 1 TO 7
		
					m.ObjName = TEXTMERGE("shpR<<m.RowIndex>>C<<m.ColIndex>>_base")
					.AddObject(m.ObjName, "Shape")
					m.BaseReference = EVALUATE("." + m.ObjName)
					WITH m.BaseReference AS Shape
						.BorderStyle = 0
						.BorderWidth = 0
						.BackStyle = 1
					ENDWITH
		
					m.ObjName = TEXTMERGE("lblR<<m.RowIndex>>C<<m.ColIndex>>")
					.AddObject(m.ObjName, "Label")
					m.ObjReference = EVALUATE("." + m.ObjName)
					WITH m.ObjReference AS Label
						.Caption = ""
						.FontName = "Segoe UI"
						.AutoSize = .T.
						.BackStyle = 0
					ENDWITH
		
					m.ObjName = TEXTMERGE("shpR<<m.RowIndex>>C<<m.ColIndex>>")
					.AddObject(m.ObjName, "Shape")
					m.ObjReference = EVALUATE("." + m.ObjName)
					WITH m.ObjReference AS Shape
						.Width = 48
						.Height = 40
						.Top = m.RowIndex * 40
						.Left = (m.ColIndex - 1) * 48
						.BackStyle = 0
						.BorderStyle = 0
						.BorderWidth = 0
						.AddProperty("ReferenceDate", {})
						.AddProperty("Selectable", .T.)
						.Visible = .T.
						m.BaseReference.Width = .Width
						m.BaseReference.Height = .Height
						m.BaseReference.Top = .Top
						m.BaseReference.Left = .Left
					ENDWITH
					BINDEVENT(m.ObjReference, "Click", Thisform, "SelectDay")
					BINDEVENT(m.ObjReference, "DblClick", Thisform, "PickDay")
					BINDEVENT(m.ObjReference, "MouseEnter", Thisform, "EnterShape")
					BINDEVENT(m.ObjReference, "MouseLeave", Thisform, "LeaveShape")
		
				ENDFOR
			ENDFOR
		
		ENDWITH
		
	ENDPROC

	PROCEDURE pgfViews.pagHours.Init
		DODEFAULT()
		
		WITH This
		
			BINDEVENT(.lblMinN1, "Click", Thisform, "PickMinute")
			BINDEVENT(.lblMinN2, "Click", Thisform, "PickMinute")
			BINDEVENT(.lblMinN3, "Click", Thisform, "PickMinute")
			BINDEVENT(.lblMinP1, "Click", Thisform, "PickMinute")
			BINDEVENT(.lblMinP2, "Click", Thisform, "PickMinute")
			BINDEVENT(.lblMinP3, "Click", Thisform, "PickMinute")
		
			BINDEVENT(.lblHouN1, "Click", Thisform, "PickHour")
			BINDEVENT(.lblHouN2, "Click", Thisform, "PickHour")
			BINDEVENT(.lblHouN3, "Click", Thisform, "PickHour")
			BINDEVENT(.lblHouP1, "Click", Thisform, "PickHour")
			BINDEVENT(.lblHouP2, "Click", Thisform, "PickHour")
			BINDEVENT(.lblHouP3, "Click", Thisform, "PickHour")
		
			.SetAll("MousePointer", 15, .lblHouN1.Class)
		
		ENDWITH
		
	ENDPROC

	PROCEDURE pgfViews.pagHours.opgMeridian.InteractiveChange
		LOCAL Base AS Date
		LOCAL Hour24 AS Integer
		
		m.Base = EVL(Thisform.SelectedTime, DTOT(Thisform.SelectedDate))
		
		* transform a 12-hour format into a 24-hour
		m.Hour24 = This.Parent.spnHour.Value
		IF m.Hour24 != 12
			m.Hour24 = m.Hour24 + IIF(This.Value = 1, 0, 12)
		ELSE
			m.Hour24 = IIF(This.Value = 1, 0, 12)
		ENDIF
		 
		Thisform.SelectedTime = DATETIME(YEAR(m.Base), MONTH(m.Base), DAY(m.Base), ;
													m.Hour24, MINUTE(m.Base), SEC(m.Base))
		
	ENDPROC

	PROCEDURE pgfViews.pagHours.spnHour.InteractiveChange
		LOCAL Base AS Date
		LOCAL Hour24 AS Integer
		
		m.Base = EVL(Thisform.SelectedTime, DTOT(Thisform.SelectedDate))
		
		* adjust the real hour vale to 24 or 12 hour display
		IF This.Parent.opgMeridian.Visible
			IF This.Value != 12
				m.Hour24 = This.Value + IIF(This.Parent.opgMeridian.Value = 1, 0, 12)
			ELSE
				m.Hour24 = IIF(This.Parent.opgMeridian.Value = 1, 0, 12)
			ENDIF
		ELSE
			m.Hour24 = This.Value
		ENDIF
		
		IF BETWEEN(m.Hour24, 0, 23)
			Thisform.SelectedTime = DATETIME(YEAR(m.Base), MONTH(m.Base), DAY(m.Base), ;
														m.Hour24, MINUTE(m.Base), SEC(m.Base))
		ENDIF
		
	ENDPROC

	PROCEDURE pgfViews.pagHours.spnMinute.InteractiveChange
		LOCAL Base AS Datetime
		
		m.Base = EVL(Thisform.SelectedTime, DTOT(Thisform.SelectedDate))
		
		IF BETWEEN(This.Value, 0, 59)
			Thisform.SelectedTime = DATETIME(YEAR(m.Base), MONTH(m.Base), DAY(m.Base), ;
														HOUR(m.Base), This.Value, SEC(m.Base))
		ENDIF
		
	ENDPROC

	PROCEDURE pgfViews.pagHours.spnSecond.InteractiveChange
		LOCAL Base AS Datetime
		
		m.Base = EVL(Thisform.SelectedTime, DTOT(Thisform.SelectedDate))
		
		IF BETWEEN(This.Value, 0, 59)
			Thisform.SelectedTime = DATETIME(YEAR(m.Base), MONTH(m.Base), DAY(m.Base), ;
														HOUR(m.Base), MINUTE(m.Base), This.Value)
		ENDIF
		
	ENDPROC

	PROCEDURE pgfViews.pagMonths.Init
		LOCAL ObjName AS String, ObjReference AS Object, BaseReference AS Shape, RowIndex AS Integer, ColIndex AS Integer
		
		* build a matrix of 4 x 4 tiles to display months of a year
		* each tile has 3 layers:
		* - the base shape, to be filled with TodayBackColor
		* - the label, where the month short name is put
		* - the control shape, that receives the user input and is marked as being hovered on or selected
		* the control shape holds its respective reference date, as a property
		* these tiles are setup in the begining, and then populated as the user interacts
		WITH This
		
			FOR m.RowIndex = 1 TO 4
				FOR m.ColIndex = 1 TO 4
		
					m.ObjName = TEXTMERGE("shpR<<m.RowIndex>>C<<m.ColIndex>>_base")
					.AddObject(m.ObjName, "Shape")
					m.BaseReference = EVALUATE("." + m.ObjName)
					WITH m.BaseReference AS Shape
						.BackColor = Thisform.TodayBackColor
						.BorderStyle = 0
						.BorderWidth = 0
						.BackStyle = 1
					ENDWITH
		
					m.ObjName = TEXTMERGE("lblR<<m.RowIndex>>C<<m.ColIndex>>")
					.AddObject(m.ObjName, "Label")
					m.ObjReference = EVALUATE("." + m.ObjName)
					WITH m.ObjReference AS Label
						.Caption = ""
						.FontName = "Segoe UI"
						.AutoSize = .T.
						.BackStyle = 0
					ENDWITH
		
					m.ObjName = TEXTMERGE("shpR<<m.RowIndex>>C<<m.ColIndex>>")
					.AddObject(m.ObjName, "Shape")
					m.ObjReference = EVALUATE("." + m.ObjName)
					WITH m.ObjReference AS Shape
						.Width = 84
						.Height = 70
						.Top = (m.RowIndex - 1) * 70
						.Left = (m.ColIndex - 1) * 84
						.BackStyle = 0
						.BorderStyle = 0
						.BorderWidth = 0
						.AddProperty("ReferenceDate", {})
						.AddProperty("Selectable", .F.)
						.Visible = .T.
						m.BaseReference.Width = .Width
						m.BaseReference.Height = .Height
						m.BaseReference.Top = .Top
						m.BaseReference.Left = .Left
					ENDWITH
					BINDEVENT(m.ObjReference, "Click", Thisform, "PickMonth")
					BINDEVENT(m.ObjReference, "DblClick", Thisform, "PickMonth")
					BINDEVENT(m.ObjReference, "MouseEnter", Thisform, "EnterShape")
					BINDEVENT(m.ObjReference, "MouseLeave", Thisform, "LeaveShape")
		
				ENDFOR
			ENDFOR
		
		ENDWITH
		
	ENDPROC

	PROCEDURE pgfViews.pagYears.Init
		LOCAL ObjName AS String, ObjReference AS Object, BaseReference AS Shape, RowIndex AS Integer, ColIndex AS Integer
		
		* build a matrix of 4 x 4 tiles to display years in a decade
		* each tile has 3 layers:
		* - the base shape, to be filled with TodayBackColor
		* - the label, where the year is put
		* - the control shape, that receives the user input and is marked as being hovered on or selected
		* the control shape holds its respective reference date, as a property
		* these tiles are setup in the begining, and then populated as the user interacts
		WITH This
		
			FOR m.RowIndex = 1 TO 4
				FOR m.ColIndex = 1 TO 4
		
					m.ObjName = TEXTMERGE("shpR<<m.RowIndex>>C<<m.ColIndex>>_base")
					.AddObject(m.ObjName, "Shape")
					m.BaseReference = EVALUATE("." + m.ObjName)
					WITH m.BaseReference AS Shape
						.BackColor = Thisform.TodayBackColor
						.BorderStyle = 0
						.BorderWidth = 0
						.BackStyle = 1
					ENDWITH
		
					m.ObjName = TEXTMERGE("lblR<<m.RowIndex>>C<<m.ColIndex>>")
					.AddObject(m.ObjName, "Label")
					m.ObjReference = EVALUATE("." + m.ObjName)
					WITH m.ObjReference AS Label
						.Caption = ""
						.FontName = "Segoe UI"
						.BackStyle = 0
						.AutoSize = .T.
					ENDWITH
		
					m.ObjName = TEXTMERGE("shpR<<m.RowIndex>>C<<m.ColIndex>>")
					.AddObject(m.ObjName, "Shape")
					m.ObjReference = EVALUATE("." + m.ObjName)
					WITH m.ObjReference AS Shape
						.Width = 84
						.Height = 70
						.Top = (m.RowIndex - 1) * 70
						.Left = (m.ColIndex - 1) * 84
						.BackStyle = 0
						.BorderStyle = 0
						.BorderWidth = 0
						.AddProperty("ReferenceDate", {})
						.AddProperty("Selectable", .F.)
						.Visible = .T.
						m.BaseReference.Width = .Width
						m.BaseReference.Height = .Height
						m.BaseReference.Top = .Top
						m.BaseReference.Left = .Left
					ENDWITH
					BINDEVENT(m.ObjReference, "Click", Thisform, "PickYear")
					BINDEVENT(m.ObjReference, "DblClick", Thisform, "PickYear")
					BINDEVENT(m.ObjReference, "MouseEnter", Thisform, "EnterShape")
					BINDEVENT(m.ObjReference, "MouseLeave", Thisform, "LeaveShape")
		
				ENDFOR
			ENDFOR
		
		ENDWITH
		
	ENDPROC

ENDDEFINE

DEFINE CLASS textdatepicker AS textbox 
 	*< CLASSDATA: Baseclass="textbox" Timestamp="" Scale="Pixels" Uniqueid="" />

	*<DefinedPropArrayMethod>
		*m: dpopen		&& Opens a date picker window.
		*m: left_assign
		*m: setcalendars		&& Set calendars collection.
		*m: top_assign
		*m: visible_assign
		*m: width_assign
		*p: calendarindex		&& The calendar from the calendars collection that will be used to pick a date.
		*p: calendars		&& Collection of alternative calendars.
		*p: dpform
		*p: dpswitch		&& Control to switch to the date picker form.
		*p: isdatetime		&& Signals if time should be input, also.
		*p: nosystemcalendar		&& If set, do not use the system calendar.
		*p: _memberdata		&& XML Metadata for customizable properties
	*</DefinedPropArrayMethod>

	Alignment = 3
	calendarindex = 0		&& The calendar from the calendars collection that will be used to pick a date.
	calendars = .NULL.		&& Collection of alternative calendars.
	dpform = .NULL.
	dpswitch = .NULL.		&& Control to switch to the date picker form.
	isdatetime = .F.		&& Signals if time should be input, also.
	Name = "textdatepicker"
	NullDisplay = " "
	Value = {}
	_memberdata = <VFPData>
		<memberdata name="dpform" type="property" display="DPForm"/>
		<memberdata name="dpswitch" type="property" display="DPSwitch"/>
		<memberdata name="dpopen" type="method" display="DPOpen"/>
		<memberdata name="isdatetime" type="property" display="IsDatetime"/>
		<memberdata name="calendars" type="property" display="Calendars"/>
		<memberdata name="calendarindex" type="property" display="CalendarIndex"/>
		<memberdata name="nosystemcalendar" type="property" display="NoSystemCalendar"/>
		<memberdata name="setcalendars" type="method" display="SetCalendars"/>
		</VFPData>		&& XML Metadata for customizable properties
	
	PROCEDURE DblClick
		This.DPOpen()
		
	ENDPROC

	PROCEDURE Destroy
		DODEFAULT()
		UNBINDEVENTS(This)
		This.DPForm = .NULL.
		TRY
			This.Parent.RemoveObject(This.DPSwitch.Name)
		CATCH
		ENDTRY
		This.DPSwitch = .NULL.
		
	ENDPROC

	PROCEDURE dpopen		&& Opens a date picker window.
		IF This.Enabled AND !This.ReadOnly
			This.DPForm = .NULL.
			This.DPForm = CREATEOBJECT("FormDatePicker", This)
			This.DPForm.Show()
		ENDIF
		
	ENDPROC

	PROCEDURE GotFocus
		DODEFAULT()
		
		This.DPForm = .NULL.
		
	ENDPROC

	PROCEDURE Init
		LOCAL DPName AS String
		LOCAL ResetAnchor AS Integer
		
		IF !DODEFAULT()
			RETURN .F.
		ENDIF
		
		IF This.DateFormat = 0 AND EMPTY(This.InputMask)
			IF This.IsDatetime
				This.InputMask = CHRTRAN(TTOC(DATETIME()), "012345678AP", "999999999!!")
				This.MaxLength = LEN(TTOC(DATETIME()))
			ELSE
				This.InputMask = CHRTRAN(DTOC(DATE()), "012345678", "999999999")
				This.MaxLength = LEN(DTOC(DATE()))
			ENDIF
		ENDIF
		
		m.DPName = This.Name + "_DP"
		TRY
			This.Parent.RemoveObject(m.DPName)
		CATCH
		ENDTRY
		
		This.Parent.AddObject(m.DPName, "Label")
		This.DPSwitch = EVALUATE("This.Parent." + m.DPName)
		
		WITH This.DPSwitch AS Label
		
			.AutoSize = .T.
			.FontName = "Wingdings"
			.FontBold = .T.
			.FontSize = This.FontSize
			.BackColor = This.ForeColor
			.ForeColor = This.BackColor
			.BackStyle = 1
			.Top = This.Top
			.Height = This.Height
			.Visible = .T.
			.Caption = "ä"
		
			.Left = This.Left + This.Width - .Width
		
			m.ResetAnchor = This.Anchor
			This.Anchor = 0	
			This.Width = This.Width - .Width
			This.Anchor = m.ResetAnchor
		
			.Anchor = BITAND(This.Anchor, 0x0C)
		
		ENDWITH
		
		BINDEVENT(This.DPSwitch, "Click", This, "DPOpen")
		
		This.SetCalendars()
		
	ENDPROC

	PROCEDURE left_assign
		LPARAMETERS NewVal
		
		This.Left = m.NewVal
		
		This.DPSwitch.Left = This.Left + This.Width
		
	ENDPROC

	PROCEDURE setcalendars		&& Set calendars collection.
	ENDPROC

	PROCEDURE top_assign
		LPARAMETERS NewVal
		
		This.Top = m.NewVal
		
		This.DPSwitch.Top = This.Top
		
	ENDPROC

	PROCEDURE visible_assign
		LPARAMETERS NewVal
		
		This.Visible = m.NewVal
		
		This.DPSwitch.Visible = m.NewVal
	ENDPROC

	PROCEDURE width_assign
		LPARAMETERS NewVal
		
		This.Width = m.NewVal
		
		This.DPSwitch.Left = This.Left + This.Width
		
	ENDPROC

ENDDEFINE
